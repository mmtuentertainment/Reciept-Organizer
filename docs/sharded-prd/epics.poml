<document>
  <meta>
    <title>Epics</title>
    <type>prd-section</type>
    <version>1.0</version>
  </meta>
  
  <section id="epics">
    <h1>Epics</h1>
    
    <epic id="capture-and-extract">
      <h2>Epic: Capture &amp; Extract</h2>
      <goal>Seamless photo-to-data pipeline with automatic cloud backup</goal>
      
      <architecture-note>
        Built on hybrid cloud from the start:
        - Local processing for speed
        - Automatic cloud upload after capture
        - Intelligent caching (recent receipts only)
      </architecture-note>
      
      <user-stories>
        <story id="batch-capture" priority="P0" persona="Sarah">
          <narrative>As Sarah, I want to capture multiple receipts quickly with automatic cloud backup, so I can process a stack during downtime without worrying about storage</narrative>
          <acceptance-criteria>Batch mode captures 10 receipts in &lt;3min, auto-uploads to cloud, local cache manages space</acceptance-criteria>
          <implementation>OCR locally, upload to Supabase Storage, keep recent in SQLite cache</implementation>
        </story>
        
        <story id="edge-detection" priority="P0" persona="Mike">
          <narrative>As Mike, I want automatic edge detection, so I don't waste time cropping</narrative>
          <acceptance-criteria>80%+ success rate on standard receipts</acceptance-criteria>
        </story>
        
        <story id="confidence-scores" priority="P0" persona="Linda">
          <narrative>As Linda, I want to see OCR confidence scores, so I know what needs verification</narrative>
          <acceptance-criteria>Color-coded scores visible for each field</acceptance-criteria>
        </story>
        
        <story id="retry-capture" priority="P1" persona="Sarah">
          <narrative>As Sarah, I want to retry failed captures, so blurry photos don't block my workflow</narrative>
          <acceptance-criteria>Retry option immediately available</acceptance-criteria>
        </story>
      </user-stories>
    </epic>
    
    <epic id="review-and-correct">
      <h2>Epic: Review &amp; Correct</h2>
      <goal>Efficient error correction with real-time sync across devices</goal>
      
      <architecture-note>
        Real-time synchronization built-in:
        - Edits sync immediately via Supabase
        - Conflict resolution for concurrent edits
        - Offline queue for connectivity issues
      </architecture-note>
      
      <implementation-note>
        Stories evolved during development:
        - "receipt-notes" → Implemented as notes field in Story 2.3
        - "image-reference" → Expanded to full "Zoom and Pan" feature (Story 2.3)
        - Added "Quick Actions" (Story 2.4) for rapid receipt operations
      </implementation-note>
      
      <user-stories>
        <story id="inline-editing" priority="P0" persona="Linda">
          <narrative>As Linda, I want to edit low-confidence fields inline, so corrections are fast</narrative>
          <acceptance-criteria>Single tap to edit, auto-keyboard selection</acceptance-criteria>
          <implementation>Story 2.1 - Complete</implementation>
        </story>
        
        <story id="merchant-normalization" priority="P1" persona="Mike">
          <narrative>As Mike, I want merchant name normalization, so "MCDONALDS #4521" becomes "McDonalds"</narrative>
          <acceptance-criteria>Common vendors cleaned automatically</acceptance-criteria>
          <implementation>Story 2.2 - Complete</implementation>
        </story>
        
        <story id="zoom-and-pan" priority="P1" persona="Linda">
          <narrative>As Linda, I want to zoom and pan receipt images, so I can verify hard-to-read areas</narrative>
          <acceptance-criteria>Pinch-to-zoom, double-tap zoom, smooth panning, includes note field</acceptance-criteria>
          <implementation>Story 2.3 - Complete (expanded from original "image-reference")</implementation>
        </story>
        
        <story id="quick-actions" priority="P2" persona="Sarah">
          <narrative>As Sarah, I want quick action buttons, so I can rapidly process receipts</narrative>
          <acceptance-criteria>One-tap delete, duplicate, share actions</acceptance-criteria>
          <implementation>Story 2.4 - Complete (new addition)</implementation>
        </story>
      </user-stories>
    </epic>
    
    <epic id="organize-and-export">
      <h2>Epic: Organize &amp; Export</h2>
      <goal>Zero-friction data export from cloud or local cache</goal>
      
      <architecture-note>
        Cloud-first export strategy:
        - Export from Supabase for complete data
        - Fall back to local cache if offline
        - Vercel API handles validation
      </architecture-note>
      
      <user-stories>
        <story id="date-range-export" priority="P0" persona="Sarah">
          <narrative>As Sarah, I want to select date ranges for export, so I can match my accounting periods</narrative>
          <acceptance-criteria>Calendar picker with preset options</acceptance-criteria>
        </story>
        
        <story id="csv-format-options" priority="P0" persona="Linda">
          <narrative>As Linda, I want CSV format options, so I can match each client's system</narrative>
          <acceptance-criteria>QuickBooks &amp; Xero templates included</acceptance-criteria>
        </story>
        
        <story id="csv-preview" priority="P1" persona="Mike">
          <narrative>As Mike, I want to preview CSV before export, so I can catch issues</narrative>
          <acceptance-criteria>Show first 5 rows with headers</acceptance-criteria>
        </story>
        
        <story id="export-validation" priority="P0" persona="Sarah">
          <narrative>As Sarah, I want export validation, so I know it will import successfully</narrative>
          <acceptance-criteria>Pre-flight check with specific warnings</acceptance-criteria>
        </story>
        
        <story id="oauth-integration" priority="P0" persona="Linda">
          <narrative>As Linda, I want to connect directly to QuickBooks/Xero, so exports work seamlessly without manual CSV handling</narrative>
          <acceptance-criteria>OAuth 2.0 flow complete, tokens securely managed, direct API export</acceptance-criteria>
        </story>
        
        <story id="bulk-delete" priority="P2" persona="Linda">
          <narrative>As Linda, I want to bulk delete processed receipts, so storage doesn't fill up</narrative>
          <acceptance-criteria>Multi-select with confirmation</acceptance-criteria>
        </story>
      </user-stories>
    </epic>
    
    <epic id="settings-and-support">
      <h2>Epic: Settings &amp; Support</h2>
      <goal>User control including sync preferences and cache management</goal>
      
      <architecture-note>
        Cloud-aware settings:
        - Sync frequency controls
        - Local cache size limits
        - Offline mode preferences
      </architecture-note>
      
      <user-stories>
        <story id="default-export-format" priority="P2" persona="Mike">
          <narrative>As Mike, I want to set default export format, so I don't repeat selections</narrative>
          <acceptance-criteria>Sticky preference in settings</acceptance-criteria>
        </story>
        
        <story id="storage-usage" priority="P2" persona="Sarah">
          <narrative>As Sarah, I want to see local cache vs cloud storage usage, so I can manage my device space</narrative>
          <acceptance-criteria>Separate indicators for local cache and cloud storage, one-tap cache cleanup</acceptance-criteria>
          <implementation>Show SQLite cache size, Supabase quota, smart cleanup options</implementation>
        </story>
        
        <story id="confidence-thresholds" priority="P3" persona="Linda">
          <narrative>As Linda, I want to adjust OCR confidence thresholds, so I can tune for accuracy vs speed</narrative>
          <acceptance-criteria>Slider with preview of impact</acceptance-criteria>
        </story>
        
        <story id="data-export" priority="P3" persona="Mike">
          <narrative>As Mike, I want to export all data for backup, so I'm not locked in</narrative>
          <acceptance-criteria>Full JSON export option</acceptance-criteria>
        </story>
      </user-stories>
    </epic>
    
    <epic id="cross-device-collaboration">
      <h2>Epic: Cross-Device &amp; Collaboration</h2>
      <goal>Seamless multi-device access and team collaboration</goal>
      
      <architecture-note>
        Enabled by hybrid cloud foundation:
        - Supabase handles device sync
        - Web access via Flutter Web
        - Sharing via secure URLs
        - All devices see same data
      </architecture-note>
      
      <user-stories>
        <story id="multi-device-sync" priority="P0" persona="Sarah">
          <narrative>As Sarah, I want to capture on my phone and review on my tablet, so I can work from any device</narrative>
          <acceptance-criteria>Changes sync within 5 seconds, seamless device switching, consistent state</acceptance-criteria>
          <implementation>Supabase realtime subscriptions, device-aware caching</implementation>
        </story>
        
        <story id="web-dashboard" priority="P0" persona="Mike">
          <narrative>As Mike, I want a web dashboard for receipt management, so I can work from my desktop without installing software</narrative>
          <acceptance-criteria>Full feature parity, responsive design, keyboard shortcuts, bulk operations</acceptance-criteria>
          <implementation>Flutter Web with progressive enhancement</implementation>
        </story>
        
        <story id="accountant-sharing" priority="P1" persona="Linda">
          <narrative>As Linda, I want to share receipts with my accountant, so they can access what they need without me exporting</narrative>
          <acceptance-criteria>Secure share links, read-only access, time-limited sharing, revocation control</acceptance-criteria>
          <implementation>Supabase RLS with signed URLs, share management UI</implementation>
        </story>
        
        <story id="team-workspace" priority="P2" persona="Linda">
          <narrative>As Linda, I want my bookkeeper to help process receipts, so we can divide the work</narrative>
          <acceptance-criteria>Role-based access, activity history, concurrent editing protection</acceptance-criteria>
          <implementation>Supabase Auth with teams, optimistic locking</implementation>
        </story>
        
        <story id="receipt-comments" priority="P2" persona="Mike">
          <narrative>As Mike, I want to add comments to receipts, so I can communicate with my accountant about specific items</narrative>
          <acceptance-criteria>Threaded comments, @mentions, notifications, comment history</acceptance-criteria>
          <implementation>Comments table with real-time updates</implementation>
        </story>
      </user-stories>
    </epic>
    
    <epic id="platform-infrastructure">
      <h2>Epic: Platform Infrastructure</h2>
      <goal>Technical foundation for hybrid cloud architecture</goal>
      
      <implementation-note>
        This epic represents the technical implementation work needed to support
        the user-facing features in other epics. It's not user-visible but enables
        the hybrid cloud architecture that makes everything else possible.
      </implementation-note>
      
      <technical-stories>
        <story id="test-infrastructure" priority="P0">
          <narrative>Fix 131 failing tests by implementing mock services</narrative>
          <acceptance-criteria>All 571 tests passing, no path_provider dependencies, <2min test execution</acceptance-criteria>
          <implementation>Repository pattern with mock implementations</implementation>
        </story>
        
        <story id="supabase-setup" priority="P0">
          <narrative>Setup Supabase backend with proper schema and RLS</narrative>
          <acceptance-criteria>Database operational, RLS configured, storage buckets created</acceptance-criteria>
          <implementation>PostgreSQL schema, row-level security, S3 storage</implementation>
        </story>
        
        <story id="sync-engine" priority="P0">
          <narrative>Implement bidirectional sync with conflict resolution</narrative>
          <acceptance-criteria>Automatic sync, offline queue, conflict resolution, retry logic</acceptance-criteria>
          <implementation>Sync queue pattern with optimistic updates</implementation>
        </story>
        
        <story id="data-migration" priority="P0">
          <narrative>Migrate existing user data from local to cloud</narrative>
          <acceptance-criteria>Zero data loss, progress tracking, rollback capability</acceptance-criteria>
          <implementation>Batch upload with checksums, feature flags</implementation>
        </story>
      </technical-stories>
    </epic>
  </section>
</document>