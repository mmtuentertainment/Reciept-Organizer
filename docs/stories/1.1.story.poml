<poml>
  <story-metadata>
    <story-id>1.1</story-id>
    <epic-id>1</epic-id>
    <title>Batch Receipt Capture</title>
    <created>2025-01-05</created>
    <author>Bob (Scrum Master)</author>
    <status>Approved</status>
  </story-metadata>

  <story-statement>
    <as-a>Sarah (owner-operator)</as-a>
    <i-want>to capture multiple receipts quickly</i-want>
    <so-that>I can process a stack during downtime</so-that>
  </story-statement>

  <acceptance-criteria>
    <criterion id="1">Batch mode captures 10 receipts in &lt;3min</criterion>
    <criterion id="2">Continuous capture mode with minimal interaction between shots</criterion>
    <criterion id="3">Visual/audio feedback after each successful capture</criterion>
    <criterion id="4">Running count of captured receipts visible during batch mode</criterion>
    <criterion id="5">Ability to review and delete individual captures before processing</criterion>
    <criterion id="6">Automatic edge detection works for each receipt in the batch</criterion>
  </acceptance-criteria>

  <tasks>
    <task id="1" acceptance-criteria="1,2">
      <title>Implement batch capture mode UI</title>
      <subtasks>
        <subtask>Create BatchCaptureScreen in apps/mobile/lib/features/capture/screens/</subtask>
        <subtask>Add batch mode toggle to camera preview screen</subtask>
        <subtask>Implement capture counter widget overlay</subtask>
        <subtask>Add "Continue Capturing" and "Finish Batch" buttons</subtask>
      </subtasks>
    </task>
    
    <task id="2" acceptance-criteria="2,6">
      <title>Implement continuous capture flow in CameraService</title>
      <subtasks>
        <subtask>Modify ICameraService.captureReceipt() to support batch mode flag</subtask>
        <subtask>Implement rapid capture without reinitializing camera between shots</subtask>
        <subtask>Ensure edge detection runs for each capture</subtask>
        <subtask>Queue captures for background processing</subtask>
      </subtasks>
    </task>
    
    <task id="3" acceptance-criteria="3">
      <title>Add capture feedback mechanisms</title>
      <subtasks>
        <subtask>Implement haptic feedback on successful capture (HapticFeedback.lightImpact())</subtask>
        <subtask>Add camera shutter sound option (AudioService)</subtask>
        <subtask>Show brief green border flash animation on capture</subtask>
        <subtask>Display thumbnail of captured receipt briefly before next capture</subtask>
      </subtasks>
    </task>
    
    <task id="4" acceptance-criteria="4">
      <title>Create batch capture state management</title>
      <subtasks>
        <subtask>Create BatchCaptureNotifier using Riverpod StateNotifier</subtask>
        <subtask>Track current batch size, capture timestamps, and image URIs</subtask>
        <subtask>Implement batchCaptureProvider in capture/providers/</subtask>
        <subtask>Auto-save batch state to prevent data loss</subtask>
      </subtasks>
    </task>
    
    <task id="5" acceptance-criteria="5">
      <title>Build batch review screen</title>
      <subtasks>
        <subtask>Create BatchReviewScreen with grid view of captures</subtask>
        <subtask>Implement swipe-to-delete with undo capability</subtask>
        <subtask>Add reorder functionality via drag and drop</subtask>
        <subtask>Include "Process All" and "Add More" actions</subtask>
      </subtasks>
    </task>
    
    <task id="6" acceptance-criteria="1">
      <title>Optimize performance for rapid captures</title>
      <subtasks>
        <subtask>Implement image compression in background isolate</subtask>
        <subtask>Use compute() for heavy image processing</subtask>
        <subtask>Cache camera configuration to avoid re-initialization</subtask>
        <subtask>Ensure memory management with proper disposal of image streams</subtask>
      </subtasks>
    </task>
    
    <task id="7">
      <title>Add unit and widget tests</title>
      <subtasks>
        <subtask>Write unit tests for BatchCaptureNotifier (test/unit/capture/)</subtask>
        <subtask>Create widget tests for BatchCaptureScreen (test/widget/capture/)</subtask>
        <subtask>Add integration test for full batch capture flow (test/integration/)</subtask>
        <subtask>Test memory usage during 10+ rapid captures</subtask>
      </subtasks>
    </task>
  </tasks>

  <dev-notes>
    <architecture-context>
      <tech-stack source="architecture.poml#tech_stack">
        <framework>Flutter 3.24.0+</framework>
        <state-management>Riverpod 2.4+</state-management>
        <camera-package>camera 0.10+</camera-package>
        <image-processing>image 4.0+</image-processing>
        <testing>Flutter Test SDK</testing>
      </tech-stack>
      
      <camera-service source="architecture.poml#service_interfaces">
        <interface>ICameraService</interface>
        <location>apps/mobile/lib/domain/services/camera_service.dart</location>
        <key-methods>
          <method>Future&lt;CaptureResult&gt; captureReceipt()</method>
          <method>Stream&lt;CameraFrame&gt; getPreviewStream()</method>
          <method>Future&lt;EdgeDetectionResult&gt; detectEdges(CameraFrame frame)</method>
        </key-methods>
      </camera-service>
      
      <project-structure source="architecture.poml#project_structure">
        <capture-features>apps/mobile/lib/features/capture/</capture-features>
        <screens>apps/mobile/lib/features/capture/screens/</screens>
        <providers>apps/mobile/lib/features/capture/providers/</providers>
        <widgets>apps/mobile/lib/features/capture/widgets/</widgets>
        <tests>apps/mobile/test/</tests>
      </project-structure>
      
      <data-models source="architecture.poml#data_models">
        <receipt-model>
          <field name="id" type="String (UUID)"/>
          <field name="imageUri" type="String"/>
          <field name="capturedAt" type="DateTime"/>
          <field name="status" type="ReceiptStatus" values="captured,processing,ready,exported,error"/>
        </receipt-model>
      </data-models>
      
      <performance-targets source="architecture.poml#performance_metrics">
        <camera-initialization>&lt;2s</camera-initialization>
        <capture-time>&lt;500ms per capture</capture-time>
        <preview-fps>&gt;=30 fps</preview-fps>
        <memory-usage>&lt;50MB for app</memory-usage>
      </performance-targets>
      
      <database source="architecture.poml#database_schema">
        <receipts-table>
          <location>SQLite via sqflite</location>
          <batch-support>batch_id field for grouping batch captures</batch-support>
        </receipts-table>
      </database>
      
      <routing source="architecture.poml#frontend_implementation">
        <initial-route>/capture</initial-route>
        <batch-route>/capture/batch</batch-route>
        <review-route>/capture/batch/review</review-route>
      </routing>
    </architecture-context>
    
    <implementation-guidance>
      <state-management>
        Use Riverpod StateNotifier for batch capture state to ensure reactive updates across screens
      </state-management>
      
      <memory-management>
        Dispose image streams properly to prevent memory leaks during rapid captures.
        Use ImageCache with limited size for thumbnails.
      </memory-management>
      
      <error-handling>
        Implement try-catch blocks around camera operations with specific error codes (CAMERA_3001-3003)
      </error-handling>
      
      <ui-patterns>
        Follow Material 3 design guidelines with custom receipt-specific components
      </ui-patterns>
    </implementation-guidance>
    
    <testing-requirements source="architecture.poml#testing_strategy">
      <test-location>apps/mobile/test/</test-location>
      <test-structure>
        <unit-tests>test/unit/capture/batch_capture_notifier_test.dart</unit-tests>
        <widget-tests>test/widget/capture/batch_capture_screen_test.dart</widget-tests>
        <integration-tests>test/integration/batch_capture_flow_test.dart</integration-tests>
      </test-structure>
      <coverage-target>&gt;80% for new code</coverage-target>
      <test-frameworks>
        <framework>Flutter Test SDK</framework>
        <framework>mockito for mocking</framework>
      </test-frameworks>
    </testing-requirements>
  </dev-notes>

  <change-log>
    <entry>
      <date>2025-01-05</date>
      <version>1.0</version>
      <description>Initial story draft created</description>
      <author>Bob (Scrum Master)</author>
    </entry>
    <entry>
      <date>2025-01-05</date>
      <version>1.1</version>
      <description>Status updated to Approved</description>
      <author>Bob (Scrum Master)</author>
    </entry>
  </change-log>

  <dev-agent-record>
    <agent-model>Not yet assigned</agent-model>
    <debug-log-references/>
    <completion-notes/>
    <file-list/>
  </dev-agent-record>

  <qa-results>
    <status>Pending implementation</status>
  </qa-results>
</poml>