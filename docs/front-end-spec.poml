<poml>
  <role>UX expert creating comprehensive front-end UX specification for Receipt Organizer MVP</role>
  <task>Transform front-end-spec.md into structured POML format with semantic UX components and enhanced organization</task>
  
  <metadata>
    <version>1.0</version>
    <date>2025-01-05</date>
    <status>Complete</status>
    <author>Sally (UX Expert)</author>
  </metadata>

  <document-header>
    <title>Receipt Organizer MVP - Front-End UX Specification</title>
    <description>Comprehensive front-end UX specification covering information architecture, user flows, wireframes, design system, and implementation guidance</description>
  </document-header>

  <section name="information-architecture">
    <heading level="1">Information Architecture</heading>
    
    <navigation-model>
      <heading level="2">Navigation Model</heading>
      <approach>Camera-First Mobile Pattern</approach>
      <primary-entry>Camera capture as home screen</primary-entry>
      <secondary-access>Recent receipts list (swipe up from bottom)</secondary-access>
      <tertiary-functions>Settings/Export via tab bar</tertiary-functions>
    </navigation-model>

    <screen-hierarchy>
      <heading level="2">Screen Hierarchy</heading>
      <structure>
        <screen name="Root">
          <screen name="Camera Capture (Default/Home)">
            <screen name="Preview &amp; Confirm" />
            <screen name="Quick Edit (4 fields)" />
            <screen name="Save Success" />
          </screen>
          <screen name="Receipt List">
            <screen name="Receipt Detail" />
            <screen name="Batch Select" />
            <screen name="Search/Filter" />
          </screen>
          <screen name="Export">
            <screen name="Format Selection" />
            <screen name="Validation Results" />
            <screen name="Download/Share" />
          </screen>
          <screen name="Settings">
            <screen name="OCR Preferences" />
            <screen name="Export Templates" />
            <screen name="Storage Management" />
          </screen>
        </screen>
      </structure>
    </screen-hierarchy>

    <data-organization>
      <heading level="2">Data Organization</heading>
      
      <receipt-object-model>
        <purpose>Core entity representing a captured and processed receipt</purpose>
        <structure>
          {
            id: string,
            capturedAt: timestamp,
            imageUri: string,
            status: 'processing' | 'ready' | 'exported',
            fields: {
              merchant: { value: string, confidence: number },
              date: { value: string, confidence: number },
              total: { value: number, confidence: number },
              tax: { value: number, confidence: number }
            },
            metadata: {
              deviceModel: string,
              appVersion: string,
              processingTime: number
            }
          }
        </structure>
      </receipt-object-model>
    </data-organization>

    <content-prioritization>
      <heading level="2">Content Prioritization</heading>
      <priorities>
        <priority level="1" type="Critical">Camera button, 4 core fields, Save action</priority>
        <priority level="2" type="Important">Confidence indicators, Export button, Recent receipts</priority>
        <priority level="3" type="Nice-to-have">Batch operations, Search, Settings</priority>
      </priorities>
    </content-prioritization>
  </section>

  <section name="user-flows">
    <heading level="1">User Flows</heading>
    
    <happy-path-flow target="≤110 seconds">
      <heading level="2">Happy Path Flow (≤110 seconds target)</heading>
      
      <workflow-diagram type="mermaid">
        graph LR
            A[Open App] --&gt;|1s| B[Camera Ready]
            B --&gt;|3s| C[Position Receipt]
            C --&gt;|2s| D[Capture Photo]
            D --&gt;|5s| E[OCR Processing]
            E --&gt;|2s| F[Review Fields]
            F --&gt;|0s| G{High Confidence?}
            G --&gt;|Yes 70%| H[Auto-Save]
            G --&gt;|No 30%| I[Quick Edit]
            I --&gt;|15s| H
            H --&gt;|2s| J[Ready for Export]
      </workflow-diagram>
      
      <time-breakdown>
        <scenario name="Best case (70%)">~15 seconds</scenario>
        <scenario name="Average case">~30 seconds with 1-2 corrections</scenario>
        <scenario name="Worst case">~110 seconds with all fields requiring edit</scenario>
      </time-breakdown>
    </happy-path-flow>

    <low-confidence-correction-flow>
      <heading level="2">Low Confidence Correction Flow</heading>
      
      <sequence-diagram type="mermaid">
        sequenceDiagram
            participant U as User
            participant A as App
            participant O as OCR Engine
            
            U-&gt;&gt;A: Capture receipt
            A-&gt;&gt;O: Process image
            O--&gt;&gt;A: Return results + confidence
            A-&gt;&gt;A: Check thresholds
            alt Confidence &lt; 75%
                A-&gt;&gt;U: Highlight low-confidence fields
                U-&gt;&gt;A: Tap field to edit
                A-&gt;&gt;U: Show keyboard with suggestion
                U-&gt;&gt;A: Correct value
                A-&gt;&gt;A: Update confidence to 100%
            else Confidence ≥ 85%
                A-&gt;&gt;A: Auto-advance to save
            end
            A-&gt;&gt;U: Show success state
      </sequence-diagram>
    </low-confidence-correction-flow>

    <batch-processing-flow>
      <heading level="2">Batch Processing Flow</heading>
      
      <steps>
        <step name="Capture Mode Activation" duration="2s">
          <description>Long-press capture button</description>
          <ui-change>UI shifts to batch indicator</ui-change>
        </step>
        
        <step name="Rapid Capture" duration="5s per receipt">
          <description>Auto-advance after each capture</description>
          <features>
            <feature>Running count overlay</feature>
            <feature>Skip preview for speed</feature>
          </features>
        </step>
        
        <step name="Bulk Review" duration="30s for 10 receipts">
          <description>Grid view of all captured</description>
          <interactions>
            <interaction>Tap any with warning icon</interaction>
            <interaction>Quick-edit inline</interaction>
          </interactions>
        </step>
        
        <step name="Batch Export" duration="5s">
          <description>Select all/none/custom</description>
          <output>Single CSV generation</output>
          <confirmation>Success confirmation</confirmation>
        </step>
      </steps>
    </batch-processing-flow>

    <export-flow>
      <heading level="2">Export Flow</heading>
      
      <flowchart type="mermaid">
        graph TD
            A[Tap Export] --&gt; B{Receipts Selected?}
            B --&gt;|No| C[Select Receipts]
            B --&gt;|Yes| D[Choose Format]
            D --&gt; E[QuickBooks CSV]
            D --&gt; F[Xero CSV]
            E --&gt; G[Validate Fields]
            F --&gt; G
            G --&gt; H{Valid?}
            H --&gt;|Yes| I[Generate CSV]
            H --&gt;|No| J[Show Errors]
            J --&gt; K[Fix &amp; Retry]
            I --&gt; L[Share/Save Options]
      </flowchart>
    </export-flow>
  </section>

  <section name="wireframes-mockups">
    <heading level="1">Wireframes and Mockups</heading>
    
    <wireframe name="Camera Capture Screen">
      <ascii-layout>
        ┌─────────────────────────┐
        │ ⚡ Receipt Stack    ⚙️ │  &lt;- Status bar
        ├─────────────────────────┤
        │                         │
        │   ┌─────────────────┐   │
        │   │                 │   │
        │   │                 │   │  &lt;- Camera preview
        │   │   [Receipt      │   │     with edge detection
        │   │    Preview]     │   │     overlay
        │   │                 │   │
        │   │                 │   │
        │   └─────────────────┘   │
        │                         │
        │  💡 Position receipt    │  &lt;- Helper text
        │     within frame        │
        │                         │
        │        ┌─────┐          │
        │        │  📷 │          │  &lt;- Capture button
        │        └─────┘          │
        │                         │
        │  [↑ Recent] [Batch 📦]  │  &lt;- Quick actions
        └─────────────────────────┘
      </ascii-layout>
      
      <shadcn-components>
        <component name="Button" usage="capture, actions" />
        <component name="Card" usage="camera preview container" />
        <component name="Badge" usage="batch count indicator" />
        <component name="Tooltip" usage="helper text on hover/tap" />
      </shadcn-components>
    </wireframe>

    <wireframe name="Field Review/Edit Screen">
      <ascii-layout>
        ┌─────────────────────────┐
        │ ← Back    Review    ✓   │
        ├─────────────────────────┤
        │  ┌─────────────────┐    │
        │  │ [Receipt Image] │    │  &lt;- Thumbnail
        │  └─────────────────┘    │
        │                         │
        │  Merchant               │
        │  ┌───────────────────┐  │
        │  │ Costco Wholesale  │  │  &lt;- Input field
        │  └───────────────────┘  │
        │  🟢 95% confidence      │  &lt;- Confidence indicator
        │                         │
        │  Date                   │
        │  ┌───────────────────┐  │
        │  │ 2024-12-28       │  │
        │  └───────────────────┘  │
        │  🟡 78% confidence      │
        │                         │
        │  Total                  │
        │  ┌───────────────────┐  │
        │  │ 127.43           │  │
        │  └───────────────────┘  │
        │  🟢 92% confidence      │
        │                         │
        │  Tax                    │
        │  ┌───────────────────┐  │
        │  │ 11.07            │  │
        │  └───────────────────┘  │
        │  🔴 68% confidence      │
        │                         │
        │  [🗑️ Delete] [💾 Save]  │
        └─────────────────────────┘
      </ascii-layout>
      
      <shadcn-components>
        <component name="Input" usage="field editing" />
        <component name="Label" usage="field names" />
        <component name="Alert" usage="low confidence warnings" />
        <component name="Progress" usage="confidence visualization" />
        <component name="Button" usage="actions" />
      </shadcn-components>
    </wireframe>

    <wireframe name="Receipt List Screen">
      <ascii-layout>
        ┌─────────────────────────┐
        │  Receipt Stack          │
        │  [Search...] [Filter ▼] │
        ├─────────────────────────┤
        │  Today (3)              │
        │  ┌─────────────────┐    │
        │  │ 📄 Costco        │   │
        │  │ $127.43 • 2:30pm│   │  &lt;- Receipt card
        │  │ ✓ Ready         │   │
        │  └─────────────────┘    │
        │  ┌─────────────────┐    │
        │  │ 📄 Starbucks    │   │
        │  │ $5.65 • 11:15am │   │
        │  │ ⚠️ Review needed│   │
        │  └─────────────────┘    │
        │                         │
        │  Yesterday (5)          │
        │  ┌─────────────────┐    │
        │  │ 📄 Target       │   │
        │  │ $89.23 • 6:45pm│   │
        │  │ ✓ Exported      │   │
        │  └─────────────────┘    │
        │                         │
        ├─────────────────────────┤
        │ [📷] [Select] [Export]  │  &lt;- Bottom actions
        └─────────────────────────┘
      </ascii-layout>
      
      <shadcn-components>
        <component name="Card" usage="receipt items" />
        <component name="ScrollArea" usage="list container" />
        <component name="Separator" usage="date groups" />
        <component name="Checkbox" usage="multi-select mode" />
        <component name="CommandMenu" usage="search/filter" />
      </shadcn-components>
    </wireframe>

    <wireframe name="Export Screen">
      <ascii-layout>
        ┌─────────────────────────┐
        │     Export Receipts     │
        ├─────────────────────────┤
        │                         │
        │  Format                 │
        │  ┌─────────────────┐    │
        │  │ ◉ QuickBooks   │    │
        │  │ ○ Xero         │    │  &lt;- Radio group
        │  │ ○ Generic CSV  │    │
        │  └─────────────────┘    │
        │                         │
        │  Date Range             │
        │  ┌──────────┬────────┐  │
        │  │ From     │ To     │  │  &lt;- Date pickers
        │  │ Dec 1    │ Dec 31 │  │
        │  └──────────┴────────┘  │
        │                         │
        │  ✓ 47 receipts selected │
        │  ⚠️ 3 missing merchant  │  &lt;- Validation
        │                         │
        │  Preview:               │
        │  ┌─────────────────┐    │
        │  │ Date,Merchant... │   │  &lt;- CSV preview
        │  │ 12/28,Costco... │   │
        │  │ 12/27,Target... │   │
        │  └─────────────────┘    │
        │                         │
        │  [Cancel] [Export CSV]  │
        └─────────────────────────┘
      </ascii-layout>
      
      <shadcn-components>
        <component name="RadioGroup" usage="format selection" />
        <component name="Calendar" usage="date range" />
        <component name="DatePicker" usage="date range" />
        <component name="Alert" usage="validation warnings" />
        <component name="Table" usage="CSV preview" />
        <component name="Dialog" usage="export modal" />
      </shadcn-components>
    </wireframe>
  </section>

  <section name="component-library-design-system">
    <heading level="1">Component Library / Design System</heading>
    
    <design-system-approach>
      <heading level="2">Design System Approach</heading>
      <foundation>shadcn/ui component library</foundation>
      <rationale>Production-ready, accessible, customizable, React/TypeScript native</rationale>
      <extensions>Receipt-specific components built on shadcn primitives</extensions>
      <theming>CSS variables for brand colors while maintaining shadcn structure</theming>
    </design-system-approach>

    <core-components>
      <heading level="2">Core Components</heading>
      
      <component name="Receipt Capture Button">
        <base>shadcn Button variant="default" size="lg"</base>
        <purpose>Primary capture action</purpose>
        <states>Idle, Pressed, Processing, Success, Error</states>
        <variants>Single capture, Batch mode (long-press activated)</variants>
      </component>

      <component name="Confidence Indicator">
        <base>Combination of shadcn Progress + Badge</base>
        <purpose>Show OCR confidence visually</purpose>
        <states>High (≥85%, green), Medium (75-84%, yellow), Low (&lt;75%, red)</states>
        <usage>Appears below each field, updates in real-time</usage>
      </component>

      <component name="Field Input">
        <base>shadcn Input with custom validation</base>
        <purpose>Edit extracted receipt data</purpose>
        <states>Default, Focus, Error, Success, Disabled</states>
        <features>Auto-format for currency/date, inline validation</features>
      </component>

      <component name="Receipt Card">
        <base>shadcn Card with structured content</base>
        <purpose>Display receipt summary in lists</purpose>
        <variants>Compact (list view), Expanded (detail view), Skeleton (loading)</variants>
        <actions>Swipe-to-delete, Tap-to-edit, Long-press-to-select</actions>
      </component>

      <component name="Export Platform Selector">
        <base>shadcn Select or RadioGroup</base>
        <purpose>Choose export format</purpose>
        <options>QuickBooks, Xero, Generic CSV, More (disabled for v1)</options>
        <behavior>Updates preview on selection</behavior>
      </component>

      <component name="Batch Progress Indicator">
        <base>shadcn Progress with label overlay</base>
        <purpose>Show batch processing status</purpose>
        <features>Current/Total count, Time estimate, Cancel option</features>
      </component>
    </core-components>
  </section>

  <section name="branding-style-guide">
    <heading level="1">Branding &amp; Style Guide</heading>
    
    <visual-identity>
      <heading level="2">Visual Identity</heading>
      
      <brand-personality>
        <target-perception>Professional efficiency meets approachable simplicity</target-perception>
        <core-attributes>Trustworthy, Efficient, Clear, Helpful</core-attributes>
        <anti-patterns>Corporate stiffness, Tech complexity, Accounting jargon</anti-patterns>
        <voice>Direct problem-solver ("Captured", "Ready", "Done") not verbose assistant</voice>
      </brand-personality>

      <logo-application-identity>
        <app-name>Receipt Stack (working title)</app-name>
        <icon-design>Stacked receipt papers with checkmark overlay</icon-design>
        <color-usage>Primary brand color in checkmark, neutral receipt representation</color-usage>
        <platform-variants>
          <ios>Rounded rectangle with 28% corner radius</ios>
          <android>Adaptive icon with foreground/background layers</android>
        </platform-variants>
      </logo-application-identity>
    </visual-identity>

    <color-system>
      <heading level="2">Color System</heading>
      
      <primary-palette description="shadcn/ui aligned">
        <light-mode description="Based on shadcn zinc theme">
          <color name="primary" value="hsl(222.2 47.4% 11.2%)" description="Deep blue-black for primary actions" />
          <color name="primary-foreground" value="hsl(210 40% 98%)" description="White text on primary" />
          <color name="success" value="hsl(142 76% 36%)" description="Green for successful capture" />
          <color name="warning" value="hsl(38 92% 50%)" description="Amber for low confidence" />
          <color name="destructive" value="hsl(0 84.2% 60.2%)" description="Red for errors/deletion" />
          <color name="muted" value="hsl(210 40% 96.1%)" description="Soft backgrounds" />
          <color name="accent" value="hsl(210 40% 90%)" description="Subtle highlights" />
        </light-mode>
        
        <dark-mode>
          <color name="primary" value="hsl(210 40% 98%)" description="Light text in dark mode" />
          <color name="background" value="hsl(222.2 84% 4.9%)" description="Near black background" />
          <color name="card" value="hsl(222.2 84% 8%)" description="Elevated surfaces" />
        </dark-mode>
      </primary-palette>

      <semantic-colors description="Receipt States">
        <color name="Capture Ready" usage="--primary with 100% opacity" />
        <color name="Processing" usage="--warning with animated pulse" />
        <color name="High Confidence (&gt;85%)" usage="--success indicator" />
        <color name="Low Confidence (&lt;75%)" usage="--warning indicator" />
        <color name="Manual Review Required" usage="--destructive border accent" />
      </semantic-colors>
    </color-system>

    <typography>
      <heading level="2">Typography</heading>
      
      <font-stack description="System-Optimized">
        <primary>-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif</primary>
        <monospace>"SF Mono", Monaco, "Cascadia Code", "Roboto Mono", monospace</monospace>
      </font-stack>

      <type-scale description="shadcn/ui defaults">
        <scale name="Display" size="2.25rem (36px)" usage="Batch totals only" />
        <scale name="Heading" size="1.875rem (30px)" usage="Section headers" />
        <scale name="Title" size="1.5rem (24px)" usage="Card headers" />
        <scale name="Body" size="1rem (16px)" usage="Primary content" />
        <scale name="Small" size="0.875rem (14px)" usage="Metadata, timestamps" />
        <scale name="Caption" size="0.75rem (12px)" usage="Help text, confidence scores" />
      </type-scale>

      <receipt-specific-typography-rules>
        <rule name="Extracted Values">--font-mono for amounts and dates</rule>
        <rule name="Confidence Scores">--font-sans small size with muted color</rule>
        <rule name="Field Labels">Medium weight, uppercase, 0.05em letter-spacing</rule>
        <rule name="Error Messages">Regular weight, --destructive color</rule>
      </receipt-specific-typography-rules>
    </typography>

    <spacing-layout-grid>
      <heading level="2">Spacing &amp; Layout Grid</heading>
      
      <base-unit-system>
        <base>4px grid system</base>
        <spacing-scale>4, 8, 12, 16, 24, 32, 48, 64px</spacing-scale>
        <touch-targets>Minimum 44x44px (iOS) / 48x48px (Android)</touch-targets>
      </base-unit-system>

      <receipt-card-spacing>
        .receipt-card {
          padding: var(--space-4);        /* 16px internal padding */
          margin-bottom: var(--space-3);  /* 12px between cards */
          border-radius: var(--radius);   /* 8px standard radius */
        }

        .field-group {
          gap: var(--space-2);             /* 8px between fields */
          padding: var(--space-3);         /* 12px group padding */
        }
      </receipt-card-spacing>
    </spacing-layout-grid>

    <visual-effects-animations>
      <heading level="2">Visual Effects &amp; Animations</heading>
      
      <motion-principles>
        <duration>150-300ms for micro-interactions</duration>
        <easing>cubic-bezier(0.4, 0, 0.2, 1) (shadcn default)</easing>
        <reduced-motion>Respect prefers-reduced-motion</reduced-motion>
      </motion-principles>

      <receipt-specific-animations>
        <animation name="capture-pulse">
          /* Capture button press */
          @keyframes capture-pulse {
            0% { transform: scale(1); }
            50% { transform: scale(0.95); opacity: 0.8; }
            100% { transform: scale(1); }
          }
        </animation>

        <animation name="processing-sweep">
          /* Processing indicator */
          @keyframes processing-sweep {
            0% { transform: translateY(0); opacity: 0; }
            50% { opacity: 1; }
            100% { transform: translateY(100%); opacity: 0; }
          }
        </animation>

        <animation name="confidence-transition">
          /* Confidence update */
          .confidence-transition {
            transition: background-color 200ms ease-in-out,
                        border-color 200ms ease-in-out;
          }
        </animation>
      </receipt-specific-animations>
    </visual-effects-animations>

    <iconography>
      <heading level="2">Iconography</heading>
      
      <icon-library>
        <primary>Lucide React (shadcn/ui default)</primary>
        <specifications>
          <spec>Consistent 24x24px base size</spec>
          <spec>1.5px stroke width</spec>
          <spec>Rounded line caps and joins</spec>
        </specifications>
      </icon-library>

      <receipt-specific-icons>
        <icon name="Camera" component="&lt;Camera /&gt;" usage="Receipt capture" />
        <icon name="Check" component="&lt;Check /&gt;" usage="High confidence/validated" />
        <icon name="AlertCircle" component="&lt;AlertCircle /&gt;" usage="Low confidence" />
        <icon name="Edit" component="&lt;Edit3 /&gt;" usage="Manual correction" />
        <icon name="Download" component="&lt;Download /&gt;" usage="CSV export" />
        <icon name="Trash" component="&lt;Trash2 /&gt;" usage="Delete receipt" />
        <icon name="ChevronRight" component="&lt;ChevronRight /&gt;" usage="Navigation/next" />
        <icon name="Upload" component="&lt;Upload /&gt;" usage="Batch processing" />
        <icon name="FileText" component="&lt;FileText /&gt;" usage="Receipt placeholder" />
      </receipt-specific-icons>
    </iconography>

    <platform-specific-adaptations>
      <heading level="2">Platform-Specific Adaptations</heading>
      
      <ios-considerations>
        <consideration>Safe area insets for notch/Dynamic Island</consideration>
        <consideration>Haptic feedback on capture (UIImpactFeedbackGenerator)</consideration>
        <consideration>San Francisco font metrics optimization</consideration>
        <consideration>Bottom sheet presentation for exports</consideration>
      </ios-considerations>

      <android-considerations>
        <consideration>Material You dynamic color support (Android 12+)</consideration>
        <consideration>Edge-to-edge display with system bar coordination</consideration>
        <consideration>Back gesture handling for form navigation</consideration>
        <consideration>FAB positioning for primary capture action</consideration>
      </android-considerations>
    </platform-specific-adaptations>

    <accessibility-color-compliance>
      <heading level="2">Accessibility Color Compliance</heading>
      
      <wcag-targets>
        <target name="Text Contrast">4.5:1 minimum (7:1 for small text)</target>
        <target name="UI Elements">3:1 minimum contrast</target>
        <target name="Focus Indicators">2px solid outline with 3:1 contrast</target>
      </wcag-targets>

      <color-blind-considerations>
        <consideration>Never rely solely on color for status (add icons/patterns)</consideration>
        <consideration>Test with deuteranopia/protanopia simulators</consideration>
        <consideration>Confidence scores include percentage text, not just color</consideration>
      </color-blind-considerations>
    </accessibility-color-compliance>

    <design-token-implementation>
      <example language="typescript">
        // tokens/receipt-tokens.ts
        export const receiptTokens = {
          // Confidence thresholds
          confidence: {
            high: { min: 85, color: 'hsl(142 76% 36%)' },
            medium: { min: 75, color: 'hsl(38 92% 50%)' },
            low: { max: 74, color: 'hsl(0 84.2% 60.2%)' }
          },
          
          // Receipt-specific spacing
          receipt: {
            card: { padding: '16px', gap: '12px' },
            field: { height: '44px', padding: '12px' },
            image: { maxHeight: '200px', borderRadius: '8px' }
          },
          
          // Animation timings
          animation: {
            capture: '300ms cubic-bezier(0.4, 0, 0.2, 1)',
            confidence: '200ms ease-in-out',
            processing: '1.5s linear infinite'
          }
        };
      </example>
    </design-token-implementation>
  </section>

  <section name="accessibility">
    <heading level="1">Accessibility</heading>
    
    <wcag-compliance>
      <heading level="2">WCAG 2.1 Level AA Compliance</heading>
      
      <core-requirements>
        <requirement name="Perceivable">All receipt data visible with proper contrast and alternative formats</requirement>
        <requirement name="Operable">Full keyboard navigation and touch gesture alternatives</requirement>
        <requirement name="Understandable">Clear labeling and predictable receipt processing behavior</requirement>
        <requirement name="Robust">Compatible with screen readers and assistive technologies</requirement>
      </core-requirements>
    </wcag-compliance>

    <screen-reader-support>
      <heading level="2">Screen Reader Support</heading>
      
      <platform-integration>
        <ios>Full VoiceOver support with custom rotor actions</ios>
        <android>TalkBack optimization with content descriptions</android>
      </platform-integration>

      <receipt-specific-announcements>
        <example language="typescript">
          // Accessibility labels for receipt states
          const a11yLabels = {
            captureButton: "Capture receipt photo",
            captureSuccess: "Receipt captured successfully, processing",
            ocrComplete: (confidence: number) =&gt; 
              `Processing complete. Overall confidence ${confidence}%. Swipe to review fields.`,
            fieldValue: (field: string, value: string, confidence: number) =&gt;
              `${field}: ${value}. Confidence ${confidence}%. Double tap to edit.`,
            lowConfidence: "Low confidence. Manual review recommended.",
            exportReady: (count: number) =&gt; 
              `${count} receipts ready for export. Double tap to download CSV.`
          };
        </example>
      </receipt-specific-announcements>
    </screen-reader-support>

    <keyboard-navigation>
      <heading level="2">Keyboard Navigation</heading>
      
      <tab-order-sequence>
        <step order="1">Skip to main content link</step>
        <step order="2">Capture receipt button (primary action)</step>
        <step order="3">Recent receipts list (if any)</step>
        <step order="4">Each receipt card's fields in order: Merchant → Date → Total → Tax</step>
        <step order="5">Edit buttons for each field</step>
        <step order="6">Save/Delete actions per receipt</step>
        <step order="7">Batch actions toolbar</step>
        <step order="8">Export button</step>
      </tab-order-sequence>

      <keyboard-shortcuts>
        <shortcut key="Space/Enter">Activate focused button</shortcut>
        <shortcut key="Tab/Shift+Tab">Navigate between fields</shortcut>
        <shortcut key="Escape">Cancel editing/close modals</shortcut>
        <shortcut key="Cmd/Ctrl + S">Save current receipt</shortcut>
        <shortcut key="Cmd/Ctrl + E">Export batch</shortcut>
      </keyboard-shortcuts>
    </keyboard-navigation>

    <touch-accessibility>
      <heading level="2">Touch Accessibility</heading>
      
      <gesture-support>
        <gesture name="Single Tap">Select/Focus element</gesture>
        <gesture name="Double Tap">Activate when using screen reader</gesture>
        <gesture name="Two-Finger Swipe">Scroll through receipt list</gesture>
        <gesture name="Three-Finger Swipe">Navigate between screens</gesture>
        <gesture name="Long Press">Show context menu with actions</gesture>
      </gesture-support>

      <touch-target-guidelines>
        .touch-target {
          min-width: 44px;  /* iOS Human Interface Guidelines */
          min-height: 44px;
          padding: 12px;    /* Increase tappable area beyond visual bounds */
        }

        /* Android specific */
        @media (hover: none) and (pointer: coarse) {
          .touch-target {
            min-width: 48px;  /* Material Design Guidelines */
            min-height: 48px;
          }
        }
      </touch-target-guidelines>
    </touch-accessibility>

    <visual-accessibility>
      <heading level="2">Visual Accessibility</heading>
      
      <high-contrast-mode>
        @media (prefers-contrast: high) {
          .receipt-card {
            border: 2px solid var(--foreground);
            box-shadow: none;
          }
          
          .confidence-indicator {
            font-weight: bold;
            text-decoration: underline;
          }
        }
      </high-contrast-mode>

      <focus-indicators>
        :focus-visible {
          outline: 2px solid var(--primary);
          outline-offset: 2px;
          border-radius: var(--radius);
        }

        /* High contrast focus */
        @media (prefers-contrast: high) {
          :focus-visible {
            outline-width: 3px;
            outline-color: currentColor;
          }
        }
      </focus-indicators>
    </visual-accessibility>

    <motion-accessibility>
      <heading level="2">Motion Accessibility</heading>
      
      <reduced-motion-support>
        @media (prefers-reduced-motion: reduce) {
          * {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
          }
          
          /* Maintain functional animations with instant feedback */
          .processing-indicator {
            animation: none;
            opacity: 1;
          }
        }
      </reduced-motion-support>
    </motion-accessibility>

    <cognitive-accessibility>
      <heading level="2">Cognitive Accessibility</heading>
      
      <simplified-language>
        <principle>Use plain language: "Take Photo" not "Initiate Capture Sequence"</principle>
        <principle>Consistent terminology: Always "receipt" not "document/invoice/bill"</principle>
        <principle>Clear error messages: "Camera access needed" not "Permission denied: CAM_001"</principle>
      </simplified-language>

      <progressive-disclosure>
        <principle>Show only 4 core fields initially</principle>
        <principle>Hide advanced options behind "More" button</principle>
        <principle>Batch operations appear only after 2+ receipts captured</principle>
      </progressive-disclosure>
    </cognitive-accessibility>

    <form-accessibility>
      <heading level="2">Form Accessibility</heading>
      
      <field-labels-errors>
        <example language="html">
          &lt;!-- Accessible form field structure --&gt;
          &lt;div class="field-group" role="group" aria-labelledby="merchant-label"&gt;
            &lt;label id="merchant-label" for="merchant-input"&gt;
              Merchant Name
              &lt;span class="confidence" aria-live="polite"&gt;
                85% confidence
              &lt;/span&gt;
            &lt;/label&gt;
            &lt;input 
              id="merchant-input"
              type="text"
              value="Costco Wholesale"
              aria-describedby="merchant-error merchant-help"
              aria-invalid="false"
            /&gt;
            &lt;span id="merchant-help" class="help-text"&gt;
              Business or store name
            &lt;/span&gt;
            &lt;span id="merchant-error" class="error-text" role="alert" hidden&gt;
              Merchant name is required
            &lt;/span&gt;
          &lt;/div&gt;
        </example>
      </field-labels-errors>
    </form-accessibility>

    <error-prevention-recovery>
      <heading level="2">Error Prevention &amp; Recovery</heading>
      
      <confirmation-dialogs>
        <example language="typescript">
          // Destructive action confirmation
          const deleteConfirmation = {
            title: "Delete Receipt?",
            message: "This will permanently remove the receipt. This cannot be undone.",
            cancel: "Keep Receipt",
            confirm: "Delete",
            ariaLabel: "Confirm receipt deletion"
          };
        </example>
      </confirmation-dialogs>

      <auto-save-indicators>
        <indicator type="Visual">Checkmark animation after field edit</indicator>
        <indicator type="Screen reader">"Changes saved" announcement</indicator>
        <indicator type="Haptic">Light feedback on iOS after save</indicator>
      </auto-save-indicators>
    </error-prevention-recovery>

    <testing-checklist>
      <heading level="2">Testing Checklist</heading>
      
      <automated-testing>
        <test>axe-core integration for accessibility violations</test>
        <test>WAVE tool validation</test>
        <test>Lighthouse accessibility score ≥95</test>
        <test>Color contrast analyzer passing</test>
      </automated-testing>

      <manual-testing>
        <test>Full keyboard-only navigation flow</test>
        <test>Screen reader testing (VoiceOver/TalkBack)</test>
        <test>200% zoom without horizontal scroll</test>
        <test>High contrast mode validation</test>
        <test>Reduced motion preference respected</test>
      </manual-testing>
    </testing-checklist>
  </section>

  <section name="responsiveness-adaptability">
    <heading level="1">Responsiveness &amp; Adaptability</heading>
    
    <device-first-breakpoint-strategy>
      <heading level="2">Device-First Breakpoint Strategy</heading>
      
      <mobile-only-breakpoints note="No Desktop in MVP">
        /* Base: iPhone SE/12 Mini (375px) */
        @media (min-width: 375px) { }

        /* Medium: iPhone 14/15 Standard (390px) */
        @media (min-width: 390px) { }

        /* Large: iPhone Plus/Max &amp; Android Flagships (428px) */
        @media (min-width: 428px) { }

        /* Tablet Portrait - Future consideration only */
        @media (min-width: 768px) { 
          /* Graceful scaling, not optimized */
        }
      </mobile-only-breakpoints>
    </device-first-breakpoint-strategy>

    <viewport-configurations>
      <heading level="2">Viewport Configurations</heading>
      
      <safe-area-handling>
        .app-container {
          /* Account for notches and system UI */
          padding-top: env(safe-area-inset-top);
          padding-bottom: env(safe-area-inset-bottom);
          padding-left: env(safe-area-inset-left);
          padding-right: env(safe-area-inset-right);
        }

        /* iOS specific viewport */
        &lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, viewport-fit=cover"&gt;
      </safe-area-handling>
    </viewport-configurations>

    <orientation-handling>
      <heading level="2">Orientation Handling</heading>
      
      <portrait-first-design>
        /* Portrait (Default) */
        .receipt-capture {
          height: calc(100vh - env(safe-area-inset-top) - 120px);
          display: flex;
          flex-direction: column;
        }

        /* Landscape (Basic Support) */
        @media (orientation: landscape) {
          .receipt-capture {
            flex-direction: row;
            height: calc(100vh - env(safe-area-inset-top) - 60px);
          }
          
          .capture-preview {
            max-width: 50%;
          }
          
          /* Hide less critical elements */
          .batch-summary { display: none; }
        }
      </portrait-first-design>
    </orientation-handling>

    <dynamic-type-support>
      <heading level="2">Dynamic Type Support</heading>
      
      <ios-dynamic-type>
        /* Support iOS Dynamic Type scaling */
        .field-label {
          font: -apple-system-body;
        }

        .field-value {
          font: -apple-system-headline;
        }

        /* Constrain maximum scaling for layout stability */
        @supports (font: -apple-system-body) {
          .receipt-card {
            max-height: none; /* Allow expansion */
            min-height: 120px;
          }
        }
      </ios-dynamic-type>

      <android-font-scaling>
        /* Respect Android system font size */
        html {
          font-size: 100%; /* Base 16px */
        }

        /* Use rem units for scalability */
        .body-text {
          font-size: 1rem; /* Scales with system */
          line-height: 1.5;
        }
      </android-font-scaling>
    </dynamic-type-support>

    <component-adaptations>
      <heading level="2">Component Adaptations</heading>
      
      <receipt-card-responsive-behavior>
        <example language="typescript">
          // Responsive receipt card layout
          const ReceiptCardResponsive = {
            // iPhone SE (375px)
            small: {
              padding: '12px',
              imageHeight: '160px',
              fontSize: '14px',
              buttonSize: '36px'
            },
            
            // iPhone 14 (390px)
            medium: {
              padding: '16px',
              imageHeight: '180px',
              fontSize: '16px',
              buttonSize: '40px'
            },
            
            // iPhone Plus/Android (428px+)
            large: {
              padding: '20px',
              imageHeight: '200px',
              fontSize: '16px',
              buttonSize: '44px'
            }
          };
        </example>
      </receipt-card-responsive-behavior>

      <bottom-sheet-adaptations>
        .bottom-sheet {
          /* Small devices: Full height */
          height: calc(100vh - env(safe-area-inset-top));
        }

        @media (min-width: 428px) and (min-height: 800px) {
          .bottom-sheet {
            /* Larger devices: Partial height */
            height: 70vh;
            max-height: 600px;
            border-radius: 16px 16px 0 0;
          }
        }
      </bottom-sheet-adaptations>
    </component-adaptations>

    <touch-target-scaling>
      <heading level="2">Touch Target Scaling</heading>
      
      <responsive-touch-targets>
        .touch-button {
          /* Minimum viable target */
          min-width: 44px;
          min-height: 44px;
          padding: 8px 12px;
        }

        /* Larger screens get more comfortable targets */
        @media (min-width: 428px) {
          .touch-button {
            min-width: 48px;
            min-height: 48px;
            padding: 12px 16px;
          }
        }

        /* Accessibility mode */
        @media (prefers-reduced-motion: reduce) {
          .touch-button {
            /* Even larger targets for users with motor impairments */
            min-width: 56px;
            min-height: 56px;
          }
        }
      </responsive-touch-targets>
    </touch-target-scaling>

    <image-handling>
      <heading level="2">Image Handling</heading>
      
      <responsive-image-loading>
        <example language="typescript">
          // Adaptive image quality based on device
          const getImageQuality = (screenWidth: number): number =&gt; {
            if (screenWidth &lt;= 375) return 0.7;  // iPhone SE
            if (screenWidth &lt;= 390) return 0.8;  // iPhone 14
            return 0.9;  // Larger devices
          };

          // Maximum dimensions by device
          const getMaxImageSize = (screenWidth: number) =&gt; ({
            width: screenWidth &lt;= 375 ? 1200 : 1600,
            height: screenWidth &lt;= 375 ? 1600 : 2000
          });
        </example>
      </responsive-image-loading>
    </image-handling>

    <network-adaptation>
      <heading level="2">Network Adaptation</heading>
      
      <connection-aware-features>
        <example language="typescript">
          // Adjust behavior based on network
          const getNetworkStrategy = () =&gt; {
            const connection = navigator.connection;
            
            if (!connection) return 'default';
            
            if (connection.saveData) {
              return {
                imageQuality: 0.6,
                skipAnimations: true,
                batchSize: 5
              };
            }
            
            if (connection.effectiveType === '4g') {
              return {
                imageQuality: 0.9,
                skipAnimations: false,
                batchSize: 20
              };
            }
            
            // 3G or slower
            return {
              imageQuality: 0.7,
              skipAnimations: true,
              batchSize: 10
            };
          };
        </example>
      </connection-aware-features>
    </network-adaptation>

    <platform-specific-adjustments>
      <heading level="2">Platform-Specific Adjustments</heading>
      
      <ios-adaptations>
        /* iOS bounce scroll for natural feel */
        .receipt-list {
          -webkit-overflow-scrolling: touch;
          overscroll-behavior-y: contain;
        }

        /* iOS status bar spacing */
        .ios-device .header {
          padding-top: 44px; /* Account for status bar */
        }

        /* Notch/Dynamic Island handling */
        .ios-device.has-notch .header {
          padding-top: 59px; /* Larger safe area */
        }
      </ios-adaptations>

      <android-adaptations>
        /* Android system navigation */
        .android-device {
          /* Account for navigation bar */
          padding-bottom: 48px;
        }

        /* Android gesture navigation */
        .android-device.gesture-nav {
          padding-bottom: 24px; /* Smaller bar */
        }

        /* Material Design ripple */
        .android-device .touch-button::after {
          content: '';
          position: absolute;
          /* Ripple effect implementation */
        }
      </android-adaptations>
    </platform-specific-adjustments>

    <performance-budgets-by-device>
      <heading level="2">Performance Budgets by Device</heading>
      
      <resource-constraints>
        <example language="typescript">
          const performanceBudgets = {
            // Older devices (iPhone 12, Pixel 5)
            low: {
              maxMemoryMB: 50,
              maxConcurrentImages: 3,
              animationFPS: 30,
              imageProcessingDelay: 100
            },
            
            // Target devices (iPhone 14, S22)
            medium: {
              maxMemoryMB: 75,
              maxConcurrentImages: 5,
              animationFPS: 60,
              imageProcessingDelay: 50
            },
            
            // Newer devices (iPhone 15 Pro, S24)
            high: {
              maxMemoryMB: 100,
              maxConcurrentImages: 10,
              animationFPS: 120,
              imageProcessingDelay: 0
            }
          };
        </example>
      </resource-constraints>
    </performance-budgets-by-device>
  </section>

  <section name="animations-interactions">
    <heading level="1">Animations and Interactions</heading>
    
    <motion-design-principles>
      <heading level="2">Motion Design Principles</heading>
      
      <core-philosophy>
        <principle name="Purposeful">Every animation serves a functional purpose</principle>
        <principle name="Responsive">Immediate feedback for all user actions</principle>
        <principle name="Subtle">Enhance without distracting from receipt processing</principle>
        <principle name="Performant">60fps minimum, no janky animations</principle>
      </core-philosophy>
    </motion-design-principles>

    <micro-interactions>
      <heading level="2">Micro-Interactions</heading>
      
      <capture-button-states>
        <animation name="idle-state" description="subtle breathing effect">
          @keyframes capture-breathe {
            0%, 100% { transform: scale(1); opacity: 0.9; }
            50% { transform: scale(1.02); opacity: 1; }
          }

          .capture-button {
            animation: capture-breathe 3s ease-in-out infinite;
          }
        </animation>

        <animation name="press-state" description="tactile feedback">
          .capture-button:active {
            animation: none;
            transform: scale(0.95);
            transition: transform 100ms cubic-bezier(0.4, 0, 0.2, 1);
          }
        </animation>

        <animation name="success-state" description="confirmation pulse">
          @keyframes capture-success {
            0% { transform: scale(1); }
            40% { transform: scale(1.15); }
            100% { transform: scale(1); }
          }

          .capture-button.success {
            animation: capture-success 400ms cubic-bezier(0.68, -0.55, 0.265, 1.55);
          }
        </animation>
      </capture-button-states>

      <confidence-score-updates>
        <example language="typescript">
          // Animated confidence score with easing
          const animateConfidence = (
            element: HTMLElement,
            from: number,
            to: number,
            duration: number = 300
          ) =&gt; {
            const startTime = performance.now();
            const diff = to - from;
            
            const animate = (currentTime: number) =&gt; {
              const elapsed = currentTime - startTime;
              const progress = Math.min(elapsed / duration, 1);
              
              // Ease-out-cubic for natural deceleration
              const eased = 1 - Math.pow(1 - progress, 3);
              const value = from + (diff * eased);
              
              element.textContent = `${Math.round(value)}%`;
              element.style.setProperty('--confidence', value);
              
              if (progress &lt; 1) {
                requestAnimationFrame(animate);
              }
            };
            
            requestAnimationFrame(animate);
          };
        </example>
      </confidence-score-updates>
    </micro-interactions>

    <receipt-processing-animations>
      <heading level="2">Receipt Processing Animations</heading>
      
      <ocr-scanning-effect>
        <animation name="scan-sweep" description="Scanning line animation">
          @keyframes scan-sweep {
            0% {
              transform: translateY(-100%);
              opacity: 0;
            }
            10% {
              opacity: 1;
            }
            90% {
              opacity: 1;
            }
            100% {
              transform: translateY(100%);
              opacity: 0;
            }
          }

          .scanning-overlay {
            position: absolute;
            width: 100%;
            height: 2px;
            background: linear-gradient(
              90deg,
              transparent,
              var(--primary),
              transparent
            );
            animation: scan-sweep 2s ease-in-out infinite;
          }
        </animation>

        <animation name="field-extract" description="Field extraction highlight">
          @keyframes field-extract {
            0% {
              background-color: transparent;
            }
            50% {
              background-color: var(--accent);
            }
            100% {
              background-color: transparent;
            }
          }

          .field-extracting {
            animation: field-extract 600ms ease-in-out;
          }
        </animation>
      </ocr-scanning-effect>
    </receipt-processing-animations>

    <page-transitions>
      <heading level="2">Page Transitions</heading>
      
      <navigation-animations>
        /* Slide transitions between screens */
        .screen-enter {
          transform: translateX(100%);
          opacity: 0;
        }

        .screen-enter-active {
          transform: translateX(0);
          opacity: 1;
          transition: transform 300ms cubic-bezier(0.4, 0, 0.2, 1),
                      opacity 200ms ease-out;
        }

        .screen-exit {
          transform: translateX(0);
          opacity: 1;
        }

        .screen-exit-active {
          transform: translateX(-20%);
          opacity: 0;
          transition: transform 300ms cubic-bezier(0.4, 0, 0.2, 1),
                      opacity 200ms ease-in;
        }
      </navigation-animations>
    </page-transitions>

    <gesture-interactions>
      <heading level="2">Gesture Interactions</heading>
      
      <swipe-actions>
        <example language="typescript">
          // Swipe to delete with spring physics
          const swipeToDelete = {
            threshold: 80, // pixels
            velocity: 0.3, // pixels/ms
            rubberBand: (distance: number, dimension: number) =&gt; {
              return (1 - (1 / ((distance * 0.55 / dimension) + 1))) * dimension;
            },
            spring: {
              tension: 200,
              friction: 25,
              precision: 0.001
            }
          };

          // Pinch to zoom receipt image
          const pinchZoom = {
            minScale: 1,
            maxScale: 3,
            doubleTapScale: 2,
            animationDuration: 250
          };
        </example>
      </swipe-actions>
    </gesture-interactions>

    <loading-states>
      <heading level="2">Loading States</heading>
      
      <skeleton-screens>
        /* Animated skeleton for receipt cards */
        @keyframes skeleton-pulse {
          0% {
            background-position: -200% 0;
          }
          100% {
            background-position: 200% 0;
          }
        }

        .skeleton-item {
          background: linear-gradient(
            90deg,
            var(--muted) 25%,
            var(--accent) 50%,
            var(--muted) 75%
          );
          background-size: 200% 100%;
          animation: skeleton-pulse 1.5s ease-in-out infinite;
          border-radius: var(--radius);
        }
      </skeleton-screens>

      <progress-indicators>
        <example language="typescript">
          // Batch processing progress with easing
          const batchProgress = {
            update: (current: number, total: number) =&gt; {
              const percentage = (current / total) * 100;
              const duration = 300; // ms per item
              
              return {
                width: `${percentage}%`,
                transition: `width ${duration}ms cubic-bezier(0.4, 0, 0.2, 1)`,
                label: `Processing ${current} of ${total}`
              };
            }
          };
        </example>
      </progress-indicators>
    </loading-states>

    <haptic-feedback>
      <heading level="2">Haptic Feedback (iOS)</heading>
      
      <feedback-patterns>
        <example language="typescript">
          // Haptic feedback mapping
          const hapticFeedback = {
            // Light - selection changed
            selection: () =&gt; {
              if ('vibrate' in navigator) {
                navigator.vibrate(10);
              }
            },
            
            // Medium - action confirmed
            success: () =&gt; {
              if (window.webkit?.messageHandlers?.haptic) {
                window.webkit.messageHandlers.haptic.postMessage('impact.medium');
              }
            },
            
            // Heavy - error or deletion
            warning: () =&gt; {
              if (window.webkit?.messageHandlers?.haptic) {
                window.webkit.messageHandlers.haptic.postMessage('impact.heavy');
              }
            }
          };
        </example>
      </feedback-patterns>
    </haptic-feedback>

    <scroll-interactions>
      <heading level="2">Scroll Interactions</heading>
      
      <pull-to-refresh>
        /* Elastic pull-to-refresh */
        .pull-to-refresh {
          transform: translateY(var(--pull-distance));
          transition: transform 200ms cubic-bezier(0.4, 0, 0.2, 1);
        }

        .pull-indicator {
          opacity: calc(var(--pull-distance) / 100);
          transform: rotate(calc(var(--pull-distance) * 3.6deg));
        }

        /* Refresh animation */
        @keyframes refresh-spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }

        .refreshing .pull-indicator {
          animation: refresh-spin 1s linear infinite;
        }
      </pull-to-refresh>
    </scroll-interactions>

    <error-states>
      <heading level="2">Error States</heading>
      
      <shake-animation-validation>
        @keyframes error-shake {
          0%, 100% { transform: translateX(0); }
          10%, 30%, 50%, 70%, 90% { transform: translateX(-4px); }
          20%, 40%, 60%, 80% { transform: translateX(4px); }
        }

        .field-error {
          animation: error-shake 400ms ease-in-out;
          border-color: var(--destructive);
        }

        /* Error message slide-in */
        .error-message {
          animation: slide-down 200ms cubic-bezier(0.4, 0, 0.2, 1);
          transform-origin: top;
        }

        @keyframes slide-down {
          from {
            opacity: 0;
            transform: scaleY(0);
          }
          to {
            opacity: 1;
            transform: scaleY(1);
          }
        }
      </shake-animation-validation>
    </error-states>

    <performance-optimization>
      <heading level="2">Performance Optimization</heading>
      
      <animation-performance-rules>
        <example language="typescript">
          // Performance monitoring
          const animationPerformance = {
            // Use transform/opacity only for 60fps
            allowedProperties: ['transform', 'opacity'],
            
            // Disable animations on low-end devices
            shouldAnimate: () =&gt; {
              const fps = performance.now();
              const memoryMB = performance.memory?.usedJSHeapSize / 1048576;
              
              return fps &gt; 50 &amp;&amp; memoryMB &lt; 100;
            },
            
            // Reduce motion for accessibility
            reduceMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches,
            
            // Use will-change sparingly
            prepareAnimation: (element: HTMLElement) =&gt; {
              element.style.willChange = 'transform';
              setTimeout(() =&gt; {
                element.style.willChange = 'auto';
              }, 500);
            }
          };
        </example>
      </animation-performance-rules>

      <gpu-acceleration>
        /* Force GPU acceleration for smooth animations */
        .gpu-accelerated {
          transform: translateZ(0);
          will-change: transform;
          backface-visibility: hidden;
          perspective: 1000px;
        }

        /* Clean up after animation */
        .animation-complete {
          will-change: auto;
          transform: none;
        }
      </gpu-acceleration>
    </performance-optimization>
  </section>

  <section name="performance">
    <heading level="1">Performance</heading>
    
    <performance-budgets>
      <heading level="2">Performance Budgets</heading>
      
      <core-web-vitals-targets>
        <example language="typescript">
          const performanceTargets = {
            // Largest Contentful Paint (camera view ready)
            LCP: {
              target: 1500, // 1.5s
              max: 2500     // 2.5s
            },
            
            // First Input Delay (capture button responsive)
            FID: {
              target: 50,   // 50ms
              max: 100      // 100ms
            },
            
            // Cumulative Layout Shift (stable UI)
            CLS: {
              target: 0.05, // 0.05
              max: 0.1      // 0.1
            },
            
            // Time to Interactive (app fully responsive)
            TTI: {
              target: 2000, // 2s
              max: 3500     // 3.5s
            }
          };
        </example>
      </core-web-vitals-targets>
    </performance-budgets>

    <resource-loading-strategy>
      <heading level="2">Resource Loading Strategy</heading>
      
      <critical-path-optimization>
        <example language="typescript">
          // Resource loading priorities
          const resourcePriorities = {
            critical: [
              'camera-api.js',      // Core functionality
              'capture-button.css', // Above-the-fold styles
              'ml-kit-loader.js'    // OCR engine
            ],
            
            high: [
              'receipt-card.js',    // Primary UI component
              'field-editor.js',    // User interaction
              'validation.js'       // Data integrity
            ],
            
            low: [
              'export-csv.js',      // Deferred until needed
              'animations.css',     // Enhancement only
              'analytics.js'        // Non-critical tracking
            ]
          };

          // Lazy loading strategy
          const lazyLoad = {
            images: 'IntersectionObserver',
            components: 'Dynamic imports',
            routes: 'Code splitting'
          };
        </example>
      </critical-path-optimization>
    </resource-loading-strategy>

    <memory-management>
      <heading level="2">Memory Management</heading>
      
      <memory-constraints>
        <example language="typescript">
          const memoryLimits = {
            // Maximum memory usage per device tier
            lowEnd: {
              maxHeapMB: 50,
              maxImagesMB: 20,
              maxCacheMB: 10
            },
            
            midRange: {
              maxHeapMB: 75,
              maxImagesMB: 35,
              maxCacheMB: 20
            },
            
            highEnd: {
              maxHeapMB: 100,
              maxImagesMB: 50,
              maxCacheMB: 30
            }
          };

          // Image memory optimization
          class ImageMemoryManager {
            private activeImages = new Map();
            private maxMemoryMB = 35;
            
            loadImage(url: string, priority: 'high' | 'low') {
              if (this.getCurrentMemoryMB() &gt; this.maxMemoryMB * 0.8) {
                this.evictLowPriorityImages();
              }
              
              // Downscale if needed
              const quality = this.getQualityForMemory();
              return this.loadWithQuality(url, quality);
            }
            
            private evictLowPriorityImages() {
              // Remove oldest low-priority images
              const sorted = Array.from(this.activeImages.entries())
                .filter(([_, meta]) =&gt; meta.priority === 'low')
                .sort((a, b) =&gt; a[1].timestamp - b[1].timestamp);
              
              for (const [url] of sorted.slice(0, 3)) {
                this.unloadImage(url);
              }
            }
          }
        </example>
      </memory-constraints>
    </memory-management>

    <network-optimization>
      <heading level="2">Network Optimization</heading>
      
      <api-call-batching>
        <example language="typescript">
          // Batch API requests to reduce overhead
          class APIBatcher {
            private queue: Map&lt;string, Promise&lt;any&gt;&gt; = new Map();
            private batchTimer: number | null = null;
            private batchDelay = 50; // ms
            
            async batchRequest(endpoint: string, data: any) {
              if (!this.batchTimer) {
                this.batchTimer = setTimeout(() =&gt; this.flush(), this.batchDelay);
              }
              
              return new Promise((resolve) =&gt; {
                this.queue.set(endpoint, { data, resolve });
              });
            }
            
            private async flush() {
              if (this.queue.size === 0) return;
              
              const batch = Array.from(this.queue.entries());
              this.queue.clear();
              this.batchTimer = null;
              
              // Send batched request
              const results = await fetch('/api/batch', {
                method: 'POST',
                body: JSON.stringify(batch)
              });
              
              // Resolve individual promises
              batch.forEach(([_, { resolve }], index) =&gt; {
                resolve(results[index]);
              });
            }
          }
        </example>
      </api-call-batching>
    </network-optimization>

    <rendering-performance>
      <heading level="2">Rendering Performance</heading>
      
      <virtual-scrolling>
        <example language="typescript">
          // Virtual scroll implementation for large lists
          class VirtualScroller {
            private itemHeight = 120; // Receipt card height
            private visibleCount = 8; // Visible items
            private buffer = 2; // Off-screen buffer
            
            getVisibleItems(scrollTop: number, items: Receipt[]) {
              const startIndex = Math.floor(scrollTop / this.itemHeight);
              const endIndex = startIndex + this.visibleCount + this.buffer;
              
              return {
                items: items.slice(
                  Math.max(0, startIndex - this.buffer),
                  Math.min(items.length, endIndex)
                ),
                offsetY: startIndex * this.itemHeight,
                totalHeight: items.length * this.itemHeight
              };
            }
          }
        </example>
      </virtual-scrolling>

      <frame-rate-optimization>
        /* Use CSS containment for performance */
        .receipt-card {
          contain: layout style paint;
        }

        /* Optimize repaints */
        .receipt-list {
          will-change: scroll-position;
        }

        /* Reduce paint areas */
        .confidence-indicator {
          /* Isolate frequent updates */
          will-change: contents;
          contain: paint;
        }
      </frame-rate-optimization>
    </rendering-performance>

    <ocr-processing-optimization>
      <heading level="2">OCR Processing Optimization</heading>
      
      <progressive-enhancement>
        <example language="typescript">
          // Multi-stage OCR processing
          const ocrPipeline = {
            // Stage 1: Quick preview (100ms)
            quickScan: async (image: Blob) =&gt; {
              const lowRes = await downscale(image, 0.3);
              return await mlKit.quickDetect(lowRes);
            },
            
            // Stage 2: Field extraction (500ms)
            extractFields: async (image: Blob, regions: Region[]) =&gt; {
              const crops = regions.map(r =&gt; cropRegion(image, r));
              return await Promise.all(
                crops.map(crop =&gt; mlKit.recognize(crop))
              );
            },
            
            // Stage 3: Confidence validation (200ms)
            validateConfidence: (results: OCRResult[]) =&gt; {
              return results.map(r =&gt; ({
                ...r,
                confidence: calculateConfidence(r),
                needsReview: r.confidence &lt; 0.75
              }));
            }
          };
        </example>
      </progressive-enhancement>
    </ocr-processing-optimization>

    <bundle-size-optimization>
      <heading level="2">Bundle Size Optimization</heading>
      
      <code-splitting-strategy>
        <example language="typescript">
          // Route-based code splitting
          const routes = {
            capture: () =&gt; import('./views/Capture'),
            review: () =&gt; import('./views/Review'),
            export: () =&gt; import('./views/Export')
          };

          // Component-level splitting
          const HeavyComponents = {
            CSVExporter: () =&gt; import('./components/CSVExporter'),
            BatchProcessor: () =&gt; import('./components/BatchProcessor'),
            AdvancedSettings: () =&gt; import('./components/AdvancedSettings')
          };
        </example>
      </code-splitting-strategy>

      <tree-shaking-configuration>
        <example language="javascript">
          // webpack.config.js
          module.exports = {
            optimization: {
              usedExports: true,
              sideEffects: false,
              splitChunks: {
                chunks: 'all',
                cacheGroups: {
                  vendor: {
                    test: /[\\/]node_modules[\\/]/,
                    priority: 10,
                    reuseExistingChunk: true
                  },
                  common: {
                    minChunks: 2,
                    priority: 5,
                    reuseExistingChunk: true
                  }
                }
              }
            }
          };
        </example>
      </tree-shaking-configuration>
    </bundle-size-optimization>

    <caching-strategy>
      <heading level="2">Caching Strategy</heading>
      
      <multi-layer-cache>
        <example language="typescript">
          // Cache hierarchy
          const cacheStrategy = {
            // L1: Memory cache (instant)
            memory: new Map(),
            
            // L2: IndexedDB (fast)
            local: {
              receipts: 'idb:receipts',
              images: 'idb:images',
              exports: 'idb:exports'
            },
            
            // L3: Service Worker (offline)
            serviceWorker: {
              strategy: 'CacheFirst',
              maxAge: 86400, // 24 hours
              maxEntries: 100
            }
          };

          // Smart cache invalidation
          class CacheManager {
            async get(key: string) {
              // Check memory first
              if (this.memory.has(key)) {
                return this.memory.get(key);
              }
              
              // Check IndexedDB
              const local = await idb.get(key);
              if (local &amp;&amp; !this.isStale(local)) {
                this.memory.set(key, local.data);
                return local.data;
              }
              
              return null;
            }
            
            private isStale(entry: CacheEntry) {
              const maxAge = 3600000; // 1 hour
              return Date.now() - entry.timestamp &gt; maxAge;
            }
          }
        </example>
      </multi-layer-cache>
    </caching-strategy>

    <battery-optimization>
      <heading level="2">Battery Optimization</heading>
      
      <power-aware-processing>
        <example language="typescript">
          // Adjust processing based on battery
          const powerManagement = {
            async getStrategy() {
              const battery = await navigator.getBattery();
              
              if (battery.level &lt; 0.15) {
                return {
                  ocrQuality: 'low',
                  animations: false,
                  autoProcess: false,
                  brightness: 0.5
                };
              }
              
              if (battery.charging) {
                return {
                  ocrQuality: 'high',
                  animations: true,
                  autoProcess: true,
                  brightness: 1.0
                };
              }
              
              return {
                ocrQuality: 'medium',
                animations: true,
                autoProcess: battery.level &gt; 0.3,
                brightness: 0.8
              };
            }
          };
        </example>
      </power-aware-processing>
    </battery-optimization>

    <performance-monitoring>
      <heading level="2">Performance Monitoring</heading>
      
      <real-user-monitoring>
        <example language="typescript">
          // Performance tracking
          const performanceMonitor = {
            metrics: {
              captureTime: [],
              ocrTime: [],
              exportTime: [],
              memoryUsage: []
            },
            
            track(operation: string, duration: number) {
              this.metrics[operation].push(duration);
              
              // Report if threshold exceeded
              const threshold = this.getThreshold(operation);
              if (duration &gt; threshold) {
                this.reportSlowOperation(operation, duration);
              }
            },
            
            getP95(operation: string) {
              const sorted = this.metrics[operation].sort((a, b) =&gt; a - b);
              const index = Math.floor(sorted.length * 0.95);
              return sorted[index];
            },
            
            reportSlowOperation(operation: string, duration: number) {
              console.warn(`Slow ${operation}: ${duration}ms`);
              // Send to analytics
            }
          };
        </example>
      </real-user-monitoring>
    </performance-monitoring>
  </section>

  <section name="next-steps">
    <heading level="1">Next Steps</heading>
    
    <implementation-roadmap>
      <heading level="2">Implementation Roadmap</heading>
      
      <phase name="Foundation" timeframe="Week 1-2">
        <tasks>
          <task name="Environment Setup">
            <subtasks>
              <subtask>Flutter 3.24+ development environment</subtask>
              <subtask>iOS/Android device testing setup</subtask>
              <subtask>shadcn/ui component library integration</subtask>
              <subtask>Git repository with monorepo structure</subtask>
            </subtasks>
          </task>
          
          <task name="Core Architecture">
            <subtasks>
              <subtask>Camera API integration (camera_2 package)</subtask>
              <subtask>Google ML Kit setup</subtask>
              <subtask>RxDB offline-first database</subtask>
              <subtask>Basic navigation structure</subtask>
            </subtasks>
          </task>
          
          <task name="Design System Implementation">
            <subtasks>
              <subtask>Import shadcn design tokens</subtask>
              <subtask>Configure responsive breakpoints</subtask>
              <subtask>Set up theme provider with dark mode support</subtask>
              <subtask>Implement base component wrappers</subtask>
            </subtasks>
          </task>
        </tasks>
      </phase>

      <phase name="Core Features" timeframe="Week 3-4">
        <tasks>
          <task name="Receipt Capture Flow">
            <subtasks>
              <subtask>Camera preview with edge detection overlay</subtask>
              <subtask>Capture button with haptic feedback</subtask>
              <subtask>Image preprocessing pipeline</subtask>
              <subtask>Quick preview with retake option</subtask>
            </subtasks>
          </task>
          
          <task name="OCR Integration">
            <subtasks>
              <subtask>Google ML Kit text recognition</subtask>
              <subtask>Field extraction logic (4 fields)</subtask>
              <subtask>Confidence scoring system</subtask>
              <subtask>TensorFlow Lite fallback setup</subtask>
            </subtasks>
          </task>
          
          <task name="Data Management">
            <subtasks>
              <subtask>Receipt model with RxDB</subtask>
              <subtask>CRUD operations</subtask>
              <subtask>Offline queue for pending operations</subtask>
              <subtask>Local image storage optimization</subtask>
            </subtasks>
          </task>
        </tasks>
      </phase>

      <phase name="User Experience" timeframe="Week 5-6">
        <tasks>
          <task name="Field Editing Interface">
            <subtasks>
              <subtask>Inline editing with confidence indicators</subtask>
              <subtask>Keyboard management and focus flow</subtask>
              <subtask>Validation and error handling</subtask>
              <subtask>Auto-save with debouncing</subtask>
            </subtasks>
          </task>
          
          <task name="Batch Operations">
            <subtasks>
              <subtask>Multi-select interface</subtask>
              <subtask>Batch capture mode</subtask>
              <subtask>Progress indicators</subtask>
              <subtask>Bulk actions (delete, export)</subtask>
            </subtasks>
          </task>
          
          <task name="CSV Export">
            <subtasks>
              <subtask>Papa Parse integration</subtask>
              <subtask>QuickBooks/Xero format templates</subtask>
              <subtask>Pre-export validation</subtask>
              <subtask>Export history tracking</subtask>
            </subtasks>
          </task>
        </tasks>
      </phase>
    </implementation-roadmap>

    <handoff-documentation>
      <heading level="2">Handoff Documentation</heading>
      
      <for-developers>
        ## Developer Handoff Checklist

        ### Required Assets
        - [ ] Figma design file access (request from UX team)
        - [ ] shadcn/ui component documentation
        - [ ] Brand assets (logo, icons)
        - [ ] Test receipt images dataset

        ### Technical Setup
        - [ ] Flutter SDK 3.24+
        - [ ] Xcode 15+ (iOS development)
        - [ ] Android Studio (Android development)
        - [ ] VS Code with Flutter extensions

        ### Key Implementation Files
        - `/lib/core/` - Core business logic
        - `/lib/ui/components/` - Reusable UI components
        - `/lib/ui/screens/` - Screen implementations
        - `/lib/services/` - OCR, storage, export services
        - `/lib/models/` - Data models and schemas

        ### Performance Benchmarks
        - Camera ready: &lt;2s
        - OCR processing: &lt;5s
        - Field accuracy: &gt;85%
        - Memory usage: &lt;75MB
        - Crash-free rate: &gt;99.5%
      </for-developers>

      <for-qa-testing>
        ## QA Test Scenarios

        ### Critical Path Testing
        1. First-time user flow
        2. Single receipt capture → edit → export
        3. Batch capture (10+ receipts)
        4. Offline mode operations
        5. Low confidence correction flow

        ### Device Testing Matrix
        - iPhone 14 (iOS 16+)
        - iPhone 15 Pro (iOS 17+)
        - Samsung S22 (Android 13)
        - Pixel 7 (Android 14)

        ### Accessibility Testing
        - VoiceOver navigation (iOS)
        - TalkBack navigation (Android)
        - Keyboard-only navigation
        - High contrast mode
        - Large text scaling
      </for-qa-testing>
    </handoff-documentation>

    <design-validation>
      <heading level="2">Design Validation</heading>
      
      <usability-testing-protocol>
        <step number="1">Recruit 5-7 target users (small business owners)</step>
        <step number="2">Test core workflows:
          - Capture first receipt
          - Correct low-confidence fields
          - Export to CSV
          - Import into QuickBooks
        </step>
        <step number="3">Success Metrics:
          - Task completion rate &gt;90%
          - Time to first export &lt;3 minutes
          - System Usability Scale (SUS) score &gt;68
        </step>
      </usability-testing-protocol>

      <ab-testing-recommendations>
        <test>Confidence threshold (75% vs 85%)</test>
        <test>Auto-advance after capture (on/off)</test>
        <test>Field layout (vertical vs grid)</test>
        <test>Export format selection (dropdown vs radio)</test>
      </ab-testing-recommendations>
    </design-validation>

    <future-enhancements>
      <heading level="2">Future Enhancements (Post-MVP)</heading>
      
      <version name="1.1 Considerations">
        <enhancement>Cloud backup with encryption</enhancement>
        <enhancement>Receipt categories/tags</enhancement>
        <enhancement>Basic search functionality</enhancement>
        <enhancement>Multiple export formats</enhancement>
        <enhancement>Vendor auto-complete</enhancement>
      </version>

      <version name="2.0 Vision">
        <enhancement>Multi-user support with roles</enhancement>
        <enhancement>Receipt approval workflows</enhancement>
        <enhancement>Bank reconciliation matching</enhancement>
        <enhancement>Line-item extraction</enhancement>
        <enhancement>Expense report generation</enhancement>
      </version>
    </future-enhancements>

    <component-generation-prompts>
      <heading level="2">Component Generation Prompts</heading>
      
      <for-v0-vercel>
        Create a mobile-first receipt capture interface using shadcn/ui components:
        - Full-screen camera preview with edge detection overlay
        - Large circular capture button at bottom center
        - After capture: 4-field form (Merchant, Date, Total, Tax)
        - Each field shows confidence percentage (0-100%)
        - Low confidence (&lt;75%) fields highlighted in amber
        - Quick actions: Save, Retake, Delete
        - Use Lucide icons throughout
        - Follow iOS/Android safe area guidelines
      </for-v0-vercel>

      <for-lovable-cursor>
        Build a React Native receipt organizer screen with:
        - Virtual scrolling list of receipt cards
        - Each card: thumbnail, 4 fields, confidence scores
        - Inline editing on field tap
        - Swipe-to-delete with confirmation
        - Floating action button for new capture
        - shadcn design system colors and spacing
        - Smooth animations (300ms ease-out)
        - TypeScript with strict types
      </for-lovable-cursor>
    </component-generation-prompts>

    <success-criteria-checklist>
      <heading level="2">Success Criteria Checklist</heading>
      
      <mvp-launch-readiness>
        <criteria>
          <criterion>≤110s capture-to-export workflow</criterion>
          <criterion>≥98% CSV import success rate</criterion>
          <criterion>≥70% zero-touch successful captures</criterion>
          <criterion>&lt;50MB peak memory usage</criterion>
          <criterion>Full offline functionality</criterion>
          <criterion>WCAG 2.1 AA compliance</criterion>
          <criterion>4.0+ app store rating potential</criterion>
        </criteria>
      </mvp-launch-readiness>

      <post-launch-monitoring>
        <metrics>
          <metric>Daily Active Users (DAU)</metric>
          <metric>Receipt capture success rate</metric>
          <metric>Average confidence scores</metric>
          <metric>Export completion rate</metric>
          <metric>User retention (Day 1, 7, 30)</metric>
          <metric>Crash-free sessions</metric>
          <metric>Performance metrics (P50, P95)</metric>
        </metrics>
      </post-launch-monitoring>
    </success-criteria-checklist>
  </section>

  <document-footer>
    <document-status>End of UX Specification Document</document-status>
    <document-version>1.0</document-version>
    <last-updated>2025-01-05</last-updated>
    <next-review>Post-MVP Testing</next-review>
  </document-footer>

  <output-format>
    Professional POML front-end UX specification with semantic structure, comprehensive design guidance, and implementation-ready components for Receipt Organizer MVP development
  </output-format>
</poml>