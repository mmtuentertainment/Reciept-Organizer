// Mocks generated by Mockito 5.4.4 from annotations
// in receipt_organizer/test/widget/capture/preview_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i5;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:receipt_organizer/data/models/edge_detection_result.dart'
    as _i6;
import 'package:receipt_organizer/domain/services/ocr_service.dart' as _i7;
import 'package:receipt_organizer/features/capture/providers/capture_provider.dart'
    as _i2;
import 'package:state_notifier/state_notifier.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCaptureState_0 extends _i1.SmartFake implements _i2.CaptureState {
  _FakeCaptureState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CaptureNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockCaptureNotifier extends _i1.Mock implements _i2.CaptureNotifier {
  @override
  set onError(_i3.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Stream<_i2.CaptureState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i2.CaptureState>.empty(),
        returnValueForMissingStub: _i4.Stream<_i2.CaptureState>.empty(),
      ) as _i4.Stream<_i2.CaptureState>);

  @override
  _i2.CaptureState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCaptureState_0(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakeCaptureState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.CaptureState);

  @override
  set state(_i2.CaptureState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.CaptureState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeCaptureState_0(
          this,
          Invocation.getter(#debugState),
        ),
        returnValueForMissingStub: _FakeCaptureState_0(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i2.CaptureState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void startCaptureSession({String? sessionId}) => super.noSuchMethod(
        Invocation.method(
          #startCaptureSession,
          [],
          {#sessionId: sessionId},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<bool> processCapture(
    _i5.Uint8List? imageData, {
    _i6.EdgeDetectionResult? edgeDetection,
    bool? isRetryAttempt = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #processCapture,
          [imageData],
          {
            #edgeDetection: edgeDetection,
            #isRetryAttempt: isRetryAttempt,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> retryCapture() => (super.noSuchMethod(
        Invocation.method(
          #retryCapture,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  void retakePhoto() => super.noSuchMethod(
        Invocation.method(
          #retakePhoto,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cancelRetry() => super.noSuchMethod(
        Invocation.method(
          #cancelRetry,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> saveSession() => (super.noSuchMethod(
        Invocation.method(
          #saveSession,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> restoreSession(String? sessionId) => (super.noSuchMethod(
        Invocation.method(
          #restoreSession,
          [sessionId],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> clearSession() => (super.noSuchMethod(
        Invocation.method(
          #clearSession,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateEdgeDetection(
          _i6.EdgeDetectionResult? edgeDetection) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateEdgeDetection,
          [edgeDetection],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> updateField(
    String? fieldName,
    _i7.FieldData? updatedField,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateField,
          [
            fieldName,
            updatedField,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> updateFields(Map<String, _i7.FieldData>? fieldUpdates) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateFields,
          [fieldUpdates],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<String>> getActiveSessions() => (super.noSuchMethod(
        Invocation.method(
          #getActiveSessions,
          [],
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<int> getStorageUsage() => (super.noSuchMethod(
        Invocation.method(
          #getStorageUsage,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  bool updateShouldNotify(
    _i2.CaptureState? old,
    _i2.CaptureState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.RemoveListener addListener(
    _i8.Listener<_i2.CaptureState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
        returnValueForMissingStub: () {},
      ) as _i3.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
