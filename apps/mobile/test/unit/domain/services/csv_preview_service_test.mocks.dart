// Mocks generated by Mockito 5.4.4 from annotations
// in receipt_organizer/test/unit/domain/services/csv_preview_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:receipt_organizer/data/models/receipt.dart' as _i4;
import 'package:receipt_organizer/domain/services/csv_export_service.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeValidationResult_0 extends _i1.SmartFake
    implements _i2.ValidationResult {
  _FakeValidationResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExportResult_1 extends _i1.SmartFake implements _i2.ExportResult {
  _FakeExportResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CSVExportService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCSVExportService extends _i1.Mock implements _i2.CSVExportService {
  MockCSVExportService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.ValidationResult> validateForExport(
    List<_i4.Receipt>? receipts,
    _i2.ExportFormat? format,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateForExport,
          [
            receipts,
            format,
          ],
        ),
        returnValue:
            _i3.Future<_i2.ValidationResult>.value(_FakeValidationResult_0(
          this,
          Invocation.method(
            #validateForExport,
            [
              receipts,
              format,
            ],
          ),
        )),
      ) as _i3.Future<_i2.ValidationResult>);

  @override
  _i3.Future<_i2.ExportResult> exportToCSV(
    List<_i4.Receipt>? receipts,
    _i2.ExportFormat? format, {
    String? customFileName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportToCSV,
          [
            receipts,
            format,
          ],
          {#customFileName: customFileName},
        ),
        returnValue: _i3.Future<_i2.ExportResult>.value(_FakeExportResult_1(
          this,
          Invocation.method(
            #exportToCSV,
            [
              receipts,
              format,
            ],
            {#customFileName: customFileName},
          ),
        )),
      ) as _i3.Future<_i2.ExportResult>);

  @override
  String generateCSVContent(
    List<_i4.Receipt>? receipts,
    _i2.ExportFormat? format,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateCSVContent,
          [
            receipts,
            format,
          ],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #generateCSVContent,
            [
              receipts,
              format,
            ],
          ),
        ),
      ) as String);

  @override
  List<String> getRequiredFields(_i2.ExportFormat? format) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRequiredFields,
          [format],
        ),
        returnValue: <String>[],
      ) as List<String>);
}
