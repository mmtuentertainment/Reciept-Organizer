// Mocks generated by Mockito 5.4.6 from annotations
// in receipt_organizer/test/unit/providers/capture_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i6;

import 'package:camera/camera.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:receipt_organizer/data/models/camera_frame.dart' as _i8;
import 'package:receipt_organizer/data/models/capture_result.dart' as _i3;
import 'package:receipt_organizer/data/models/edge_detection_result.dart'
    as _i4;
import 'package:receipt_organizer/domain/services/camera_service.dart' as _i7;
import 'package:receipt_organizer/domain/services/ocr_service.dart' as _i2;
import 'package:receipt_organizer/features/capture/services/retry_session_manager.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProcessingResult_0 extends _i1.SmartFake
    implements _i2.ProcessingResult {
  _FakeProcessingResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFailureDetectionResult_1 extends _i1.SmartFake
    implements _i2.FailureDetectionResult {
  _FakeFailureDetectionResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCaptureResult_2 extends _i1.SmartFake implements _i3.CaptureResult {
  _FakeCaptureResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEdgeDetectionResult_3 extends _i1.SmartFake
    implements _i4.EdgeDetectionResult {
  _FakeEdgeDetectionResult_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [OCRService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOCRService extends _i1.Mock implements _i2.OCRService {
  MockOCRService() {
    _i1.throwOnMissingStub(this);
  }

  // @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  // @override
  _i5.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  // @override
  _i5.Future<_i2.ProcessingResult> processReceipt(_i6.Uint8List? imageData) =>
      (super.noSuchMethod(
        Invocation.method(
          #processReceipt,
          [imageData],
        ),
        returnValue:
            _i5.Future<_i2.ProcessingResult>.value(_FakeProcessingResult_0(
          this,
          Invocation.method(
            #processReceipt,
            [imageData],
          ),
        )),
      ) as _i5.Future<_i2.ProcessingResult>);

  // @override
  _i2.FailureDetectionResult detectFailure(
    _i2.ProcessingResult? result,
    _i6.Uint8List? imageData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #detectFailure,
          [
            result,
            imageData,
          ],
        ),
        returnValue: _FakeFailureDetectionResult_1(
          this,
          Invocation.method(
            #detectFailure,
            [
              result,
              imageData,
            ],
          ),
        ),
      ) as _i2.FailureDetectionResult);
}

/// A class which mocks [ICameraService].
///
/// See the documentation for Mockito's code generation for more information.
class MockICameraService extends _i1.Mock implements _i7.ICameraService {
  MockICameraService() {
    _i1.throwOnMissingStub(this);
  }

  // @override
  _i5.Future<_i3.CaptureResult> captureReceipt({bool? batchMode = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #captureReceipt,
          [],
          {#batchMode: batchMode},
        ),
        returnValue: _i5.Future<_i3.CaptureResult>.value(_FakeCaptureResult_2(
          this,
          Invocation.method(
            #captureReceipt,
            [],
            {#batchMode: batchMode},
          ),
        )),
      ) as _i5.Future<_i3.CaptureResult>);

  // @override
  _i5.Stream<_i8.CameraFrame> getPreviewStream() => (super.noSuchMethod(
        Invocation.method(
          #getPreviewStream,
          [],
        ),
        returnValue: _i5.Stream<_i8.CameraFrame>.empty(),
      ) as _i5.Stream<_i8.CameraFrame>);

  // @override
  _i5.Future<_i4.EdgeDetectionResult> detectEdges(_i8.CameraFrame? frame) =>
      (super.noSuchMethod(
        Invocation.method(
          #detectEdges,
          [frame],
        ),
        returnValue: _i5.Future<_i4.EdgeDetectionResult>.value(
            _FakeEdgeDetectionResult_3(
          this,
          Invocation.method(
            #detectEdges,
            [frame],
          ),
        )),
      ) as _i5.Future<_i4.EdgeDetectionResult>);

  // @override
  _i5.Future<_i9.CameraController?> getCameraController() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCameraController,
          [],
        ),
        returnValue: _i5.Future<_i9.CameraController?>.value(),
      ) as _i5.Future<_i9.CameraController?>);

  // @override
  _i5.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  // @override
  _i5.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [RetrySessionManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockRetrySessionManager extends _i1.Mock
    implements _i10.RetrySessionManager {
  MockRetrySessionManager() {
    _i1.throwOnMissingStub(this);
  }

  // @override
  _i5.Future<bool> saveSession(_i10.RetrySession? session) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSession,
          [session],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  // @override
  _i5.Future<_i10.RetrySession?> loadSession(String? sessionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSession,
          [sessionId],
        ),
        returnValue: _i5.Future<_i10.RetrySession?>.value(),
      ) as _i5.Future<_i10.RetrySession?>);

  // @override
  _i5.Future<bool> cleanupSession(String? sessionId) => (super.noSuchMethod(
        Invocation.method(
          #cleanupSession,
          [sessionId],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  // @override
  _i5.Future<int> cleanupExpiredSessions() => (super.noSuchMethod(
        Invocation.method(
          #cleanupExpiredSessions,
          [],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  // @override
  _i5.Future<List<String>> getActiveSessions() => (super.noSuchMethod(
        Invocation.method(
          #getActiveSessions,
          [],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  // @override
  _i5.Future<int> getStorageUsage() => (super.noSuchMethod(
        Invocation.method(
          #getStorageUsage,
          [],
        ),
        returnValue: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
}
