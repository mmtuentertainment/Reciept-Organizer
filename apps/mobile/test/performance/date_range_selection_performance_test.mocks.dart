// Mocks generated by Mockito 5.4.4 from annotations
// in receipt_organizer/test/performance/date_range_selection_performance_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:receipt_organizer/core/repositories/interfaces/i_receipt_repository.dart'
    as _i3;
import 'package:receipt_organizer/data/models/receipt.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeReceipt_0 extends _i1.SmartFake implements _i2.Receipt {
  _FakeReceipt_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IReceiptRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIReceiptRepository extends _i1.Mock
    implements _i3.IReceiptRepository {
  @override
  _i4.Future<List<_i2.Receipt>> getAllReceipts() => (super.noSuchMethod(
        Invocation.method(
          #getAllReceipts,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
      ) as _i4.Future<List<_i2.Receipt>>);

  @override
  _i4.Future<_i2.Receipt?> getReceiptById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getReceiptById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Receipt?>.value(),
        returnValueForMissingStub: _i4.Future<_i2.Receipt?>.value(),
      ) as _i4.Future<_i2.Receipt?>);

  @override
  _i4.Future<List<_i2.Receipt>> getReceiptsByBatchId(String? batchId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReceiptsByBatchId,
          [batchId],
        ),
        returnValue: _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
      ) as _i4.Future<List<_i2.Receipt>>);

  @override
  _i4.Future<List<_i2.Receipt>> getReceiptsByDateRange(
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReceiptsByDateRange,
          [
            start,
            end,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
      ) as _i4.Future<List<_i2.Receipt>>);

  @override
  _i4.Future<_i2.Receipt> createReceipt(_i2.Receipt? receipt) =>
      (super.noSuchMethod(
        Invocation.method(
          #createReceipt,
          [receipt],
        ),
        returnValue: _i4.Future<_i2.Receipt>.value(_FakeReceipt_0(
          this,
          Invocation.method(
            #createReceipt,
            [receipt],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Receipt>.value(_FakeReceipt_0(
          this,
          Invocation.method(
            #createReceipt,
            [receipt],
          ),
        )),
      ) as _i4.Future<_i2.Receipt>);

  @override
  _i4.Future<void> updateReceipt(_i2.Receipt? receipt) => (super.noSuchMethod(
        Invocation.method(
          #updateReceipt,
          [receipt],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteReceipt(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteReceipt,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteReceipts(List<String>? ids) => (super.noSuchMethod(
        Invocation.method(
          #deleteReceipts,
          [ids],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> getReceiptCount() => (super.noSuchMethod(
        Invocation.method(
          #getReceiptCount,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
        returnValueForMissingStub: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i2.Receipt>> getReceiptsPaginated(
    int? offset,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReceiptsPaginated,
          [
            offset,
            limit,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
      ) as _i4.Future<List<_i2.Receipt>>);
}
