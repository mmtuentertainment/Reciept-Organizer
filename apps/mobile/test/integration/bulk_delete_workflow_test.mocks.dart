// Mocks generated by Mockito 5.4.4 from annotations
// in receipt_organizer/test/integration/bulk_delete_workflow_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:receipt_organizer/core/models/audit_log.dart' as _i5;
import 'package:receipt_organizer/core/models/receipt.dart' as _i2;
import 'package:receipt_organizer/core/repositories/interfaces/i_receipt_repository.dart'
    as _i3;
import 'package:receipt_organizer/core/services/authorization_service.dart'
    as _i6;
import 'package:receipt_organizer/core/services/bulk_operation_service.dart'
    as _i8;
import 'package:receipt_organizer/core/services/undo_service.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeReceipt_0 extends _i1.SmartFake implements _i2.Receipt {
  _FakeReceipt_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IReceiptRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIReceiptRepository extends _i1.Mock
    implements _i3.IReceiptRepository {
  MockIReceiptRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Receipt>> getAllReceipts({bool? excludeDeleted = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllReceipts,
          [],
          {#excludeDeleted: excludeDeleted},
        ),
        returnValue: _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
      ) as _i4.Future<List<_i2.Receipt>>);

  @override
  _i4.Future<_i2.Receipt?> getReceiptById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getReceiptById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Receipt?>.value(),
      ) as _i4.Future<_i2.Receipt?>);

  @override
  _i4.Future<List<_i2.Receipt>> getReceiptsByBatchId(String? batchId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReceiptsByBatchId,
          [batchId],
        ),
        returnValue: _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
      ) as _i4.Future<List<_i2.Receipt>>);

  @override
  _i4.Future<List<_i2.Receipt>> getReceiptsByDateRange(
    DateTime? start,
    DateTime? end, {
    bool? excludeDeleted = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReceiptsByDateRange,
          [
            start,
            end,
          ],
          {#excludeDeleted: excludeDeleted},
        ),
        returnValue: _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
      ) as _i4.Future<List<_i2.Receipt>>);

  @override
  _i4.Future<List<_i2.Receipt>> getReceiptsByUserId(
    String? userId, {
    bool? excludeDeleted = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReceiptsByUserId,
          [userId],
          {#excludeDeleted: excludeDeleted},
        ),
        returnValue: _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
      ) as _i4.Future<List<_i2.Receipt>>);

  @override
  _i4.Future<_i2.Receipt> createReceipt(_i2.Receipt? receipt) =>
      (super.noSuchMethod(
        Invocation.method(
          #createReceipt,
          [receipt],
        ),
        returnValue: _i4.Future<_i2.Receipt>.value(_FakeReceipt_0(
          this,
          Invocation.method(
            #createReceipt,
            [receipt],
          ),
        )),
      ) as _i4.Future<_i2.Receipt>);

  @override
  _i4.Future<void> updateReceipt(_i2.Receipt? receipt) => (super.noSuchMethod(
        Invocation.method(
          #updateReceipt,
          [receipt],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> softDelete(
    List<String>? ids,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #softDelete,
          [
            ids,
            userId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> restore(
    List<String>? ids,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #restore,
          [
            ids,
            userId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> permanentDelete(
    List<String>? ids,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #permanentDelete,
          [
            ids,
            userId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Receipt>> getExpiredSoftDeletes(int? daysOld) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExpiredSoftDeletes,
          [daysOld],
        ),
        returnValue: _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
      ) as _i4.Future<List<_i2.Receipt>>);

  @override
  _i4.Future<void> deleteReceipt(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteReceipt,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteReceipts(List<String>? ids) => (super.noSuchMethod(
        Invocation.method(
          #deleteReceipts,
          [ids],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> getReceiptCount({bool? excludeDeleted = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReceiptCount,
          [],
          {#excludeDeleted: excludeDeleted},
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i2.Receipt>> getReceiptsPaginated(
    int? offset,
    int? limit, {
    bool? excludeDeleted = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReceiptsPaginated,
          [
            offset,
            limit,
          ],
          {#excludeDeleted: excludeDeleted},
        ),
        returnValue: _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
      ) as _i4.Future<List<_i2.Receipt>>);

  @override
  _i4.Future<void> logAudit(_i5.AuditLog? auditLog) => (super.noSuchMethod(
        Invocation.method(
          #logAudit,
          [auditLog],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.AuditLog>> getAuditLogs(
    String? userId, {
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuditLogs,
          [userId],
          {#limit: limit},
        ),
        returnValue: _i4.Future<List<_i5.AuditLog>>.value(<_i5.AuditLog>[]),
      ) as _i4.Future<List<_i5.AuditLog>>);
}

/// A class which mocks [AuthorizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthorizationService extends _i1.Mock
    implements _i6.AuthorizationService {
  MockAuthorizationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> canDeleteReceipt(_i2.Receipt? receipt) =>
      (super.noSuchMethod(
        Invocation.method(
          #canDeleteReceipt,
          [receipt],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i2.Receipt>> filterOwnedReceipts(
          List<_i2.Receipt>? receipts) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterOwnedReceipts,
          [receipts],
        ),
        returnValue: _i4.Future<List<_i2.Receipt>>.value(<_i2.Receipt>[]),
      ) as _i4.Future<List<_i2.Receipt>>);

  @override
  _i4.Future<bool> canBulkDelete(int? count) => (super.noSuchMethod(
        Invocation.method(
          #canBulkDelete,
          [count],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> requireReauthentication(int? operationSize) =>
      (super.noSuchMethod(
        Invocation.method(
          #requireReauthentication,
          [operationSize],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  bool canExport() => (super.noSuchMethod(
        Invocation.method(
          #canExport,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool canView() => (super.noSuchMethod(
        Invocation.method(
          #canView,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<bool> validateOperation({
    required String? operation,
    required List<_i2.Receipt>? receipts,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateOperation,
          [],
          {
            #operation: operation,
            #receipts: receipts,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [UndoService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUndoService extends _i1.Mock implements _i7.UndoService {
  MockUndoService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> schedulePermanentDeletion(
    List<String>? receiptIds, {
    Duration? customWindow,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #schedulePermanentDeletion,
          [receiptIds],
          {#customWindow: customWindow},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelScheduledDeletion(List<String>? receiptIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelScheduledDeletion,
          [receiptIds],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  bool isScheduledForDeletion(String? receiptId) => (super.noSuchMethod(
        Invocation.method(
          #isScheduledForDeletion,
          [receiptId],
        ),
        returnValue: false,
      ) as bool);

  @override
  Duration? getRemainingTime(String? receiptId) =>
      (super.noSuchMethod(Invocation.method(
        #getRemainingTime,
        [receiptId],
      )) as Duration?);

  @override
  _i4.Future<void> cleanupExpiredDeletes() => (super.noSuchMethod(
        Invocation.method(
          #cleanupExpiredDeletes,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BulkOperationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBulkOperationService extends _i1.Mock
    implements _i8.BulkOperationService {
  MockBulkOperationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i8.BulkOperationProgress> get progressStream =>
      (super.noSuchMethod(
        Invocation.getter(#progressStream),
        returnValue: _i4.Stream<_i8.BulkOperationProgress>.empty(),
      ) as _i4.Stream<_i8.BulkOperationProgress>);

  @override
  _i4.Future<void> deleteReceipts(
    List<_i2.Receipt>? receipts, {
    bool? permanent = false,
    bool? requireReauth = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteReceipts,
          [receipts],
          {
            #permanent: permanent,
            #requireReauth: requireReauth,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<int> calculateStorageToBeFreed(List<_i2.Receipt>? receipts) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateStorageToBeFreed,
          [receipts],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<void> restoreReceipts(List<String>? receiptIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #restoreReceipts,
          [receiptIds],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
