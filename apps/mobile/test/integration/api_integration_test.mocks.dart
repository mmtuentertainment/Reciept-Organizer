// Mocks generated by Mockito 5.4.6 from annotations
// in receipt_organizer/test/integration/api_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:receipt_organizer/core/services/network_connectivity_service.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NetworkConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkConnectivityService extends _i1.Mock
    implements _i2.NetworkConnectivityService {
  MockNetworkConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  bool get isApiReachable =>
      (super.noSuchMethod(
            Invocation.getter(#isApiReachable),
            returnValue: false,
          )
          as bool);

  @override
  _i3.Stream<bool> get connectivityStream =>
      (super.noSuchMethod(
            Invocation.getter(#connectivityStream),
            returnValue: _i3.Stream<bool>.empty(),
          )
          as _i3.Stream<bool>);

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<bool> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> checkApiReachability() =>
      (super.noSuchMethod(
            Invocation.method(#checkApiReachability, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  bool canMakeApiCall() =>
      (super.noSuchMethod(
            Invocation.method(#canMakeApiCall, []),
            returnValue: false,
          )
          as bool);

  @override
  _i3.Future<bool> forceCheck() =>
      (super.noSuchMethod(
            Invocation.method(#forceCheck, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}
