// Mocks generated by Mockito 5.4.4 from annotations
// in receipt_organizer/test/mocks/mock_text_recognizer.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:math' as _i7;
import 'dart:ui' as _i3;

import 'package:google_mlkit_commons/google_mlkit_commons.dart' as _i6;
import 'package:google_mlkit_text_recognition/src/text_recognizer.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRecognizedText_0 extends _i1.SmartFake
    implements _i2.RecognizedText {
  _FakeRecognizedText_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRect_1 extends _i1.SmartFake implements _i3.Rect {
  _FakeRect_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TextRecognizer].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextRecognizer extends _i1.Mock implements _i2.TextRecognizer {
  MockTextRecognizer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TextRecognitionScript get script => (super.noSuchMethod(
        Invocation.getter(#script),
        returnValue: _i2.TextRecognitionScript.latin,
      ) as _i2.TextRecognitionScript);

  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#id),
        ),
      ) as String);

  @override
  _i5.Future<_i2.RecognizedText> processImage(_i6.InputImage? inputImage) =>
      (super.noSuchMethod(
        Invocation.method(
          #processImage,
          [inputImage],
        ),
        returnValue: _i5.Future<_i2.RecognizedText>.value(_FakeRecognizedText_0(
          this,
          Invocation.method(
            #processImage,
            [inputImage],
          ),
        )),
      ) as _i5.Future<_i2.RecognizedText>);

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [RecognizedText].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecognizedText extends _i1.Mock implements _i2.RecognizedText {
  MockRecognizedText() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get text => (super.noSuchMethod(
        Invocation.getter(#text),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#text),
        ),
      ) as String);

  @override
  List<_i2.TextBlock> get blocks => (super.noSuchMethod(
        Invocation.getter(#blocks),
        returnValue: <_i2.TextBlock>[],
      ) as List<_i2.TextBlock>);
}

/// A class which mocks [TextBlock].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextBlock extends _i1.Mock implements _i2.TextBlock {
  MockTextBlock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get text => (super.noSuchMethod(
        Invocation.getter(#text),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#text),
        ),
      ) as String);

  @override
  List<_i2.TextLine> get lines => (super.noSuchMethod(
        Invocation.getter(#lines),
        returnValue: <_i2.TextLine>[],
      ) as List<_i2.TextLine>);

  @override
  _i3.Rect get boundingBox => (super.noSuchMethod(
        Invocation.getter(#boundingBox),
        returnValue: _FakeRect_1(
          this,
          Invocation.getter(#boundingBox),
        ),
      ) as _i3.Rect);

  @override
  List<String> get recognizedLanguages => (super.noSuchMethod(
        Invocation.getter(#recognizedLanguages),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<_i7.Point<int>> get cornerPoints => (super.noSuchMethod(
        Invocation.getter(#cornerPoints),
        returnValue: <_i7.Point<int>>[],
      ) as List<_i7.Point<int>>);
}

/// A class which mocks [TextLine].
///
/// See the documentation for Mockito's code generation for more information.
class MockTextLine extends _i1.Mock implements _i2.TextLine {
  MockTextLine() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get text => (super.noSuchMethod(
        Invocation.getter(#text),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#text),
        ),
      ) as String);

  @override
  List<_i2.TextElement> get elements => (super.noSuchMethod(
        Invocation.getter(#elements),
        returnValue: <_i2.TextElement>[],
      ) as List<_i2.TextElement>);

  @override
  _i3.Rect get boundingBox => (super.noSuchMethod(
        Invocation.getter(#boundingBox),
        returnValue: _FakeRect_1(
          this,
          Invocation.getter(#boundingBox),
        ),
      ) as _i3.Rect);

  @override
  List<String> get recognizedLanguages => (super.noSuchMethod(
        Invocation.getter(#recognizedLanguages),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<_i7.Point<int>> get cornerPoints => (super.noSuchMethod(
        Invocation.getter(#cornerPoints),
        returnValue: <_i7.Point<int>>[],
      ) as List<_i7.Point<int>>);
}
