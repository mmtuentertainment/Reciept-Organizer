import 'package:mockito/mockito.dart';
import 'package:mockito/annotations.dart';
import 'package:google_ml_kit/google_ml_kit.dart';

// Generate mocks for these classes
@GenerateMocks([
  TextRecognizer,
  RecognizedText, 
  TextBlock,
  TextLine
])
import 'mock_text_recognizer.mocks.dart';

// Export generated mocks for easier access
export 'mock_text_recognizer.mocks.dart';

// Note: Mock classes are now generated by build_runner
// Access them via: MockTextRecognizer, MockRecognizedText, MockTextBlock, MockTextLine

/// Test data factory for creating realistic OCR scenarios
class TestOCRData {
  /// High confidence receipt with all fields
  static RecognizedText highConfidenceReceipt() {
    final lines = [
      _createMockLine('STARBUCKS COFFEE'),
      _createMockLine('123 Main Street'),
      _createMockLine('12/06/2024 14:30'),
      _createMockLine('Latte Grande        \$4.25'),
      _createMockLine('Cookie              \$2.50'),
      _createMockLine('Subtotal            \$6.75'),
      _createMockLine('Tax                 \$0.54'),
      _createMockLine('Total               \$7.29'),
    ];
    
    final block = MockTextBlock();
    when(block.text).thenReturn(lines.map((l) => l.text).join('\n'));
    when(block.lines).thenReturn(lines);
    
    final recognized = MockRecognizedText();
    when(recognized.text).thenReturn(lines.map((l) => l.text).join(' '));
    when(recognized.blocks).thenReturn([block]);
    
    return recognized;
  }
  
  /// Low confidence receipt with missing/unclear fields
  static RecognizedText lowConfidenceReceipt() {
    final lines = [
      _createMockLine('ST@RB#CKS C0FF33'),  // Corrupted merchant name
      _createMockLine('123 M@in St'),
      _createMockLine('12/0G/Z024'),        // Corrupted date
      _createMockLine('L@tte               4.Z5'),  // Missing $ and corrupted
      _createMockLine('T0t@l               ?.?9'),  // Heavily corrupted total
    ];
    
    final block = MockTextBlock();
    when(block.text).thenReturn(lines.map((l) => l.text).join('\n'));
    when(block.lines).thenReturn(lines);
    
    final recognized = MockRecognizedText();
    when(recognized.text).thenReturn(lines.map((l) => l.text).join(' '));
    when(recognized.blocks).thenReturn([block]);
    
    return recognized;
  }
  
  /// Empty/failed OCR result
  static RecognizedText emptyResult() {
    final recognized = MockRecognizedText();
    when(recognized.text).thenReturn('');
    when(recognized.blocks).thenReturn([]);
    return recognized;
  }
  
  static MockTextLine _createMockLine(String text) {
    final line = MockTextLine();
    when(line.text).thenReturn(text);
    return line;
  }
}